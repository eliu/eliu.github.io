<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS 7 升级 gcc 版本</title>
      <link href="/2025/09/30/how-to-upgrade-gcc-on-centos7/"/>
      <url>/2025/09/30/how-to-upgrade-gcc-on-centos7/</url>
      
        <content type="html"><![CDATA[<h2 id="安装配置-centos-release-scl"><a href="#安装配置-centos-release-scl" class="headerlink" title="安装配置 centos-release-scl"></a>安装配置 centos-release-scl</h2><h3 id="安装-centos-release-scl"><a href="#安装-centos-release-scl" class="headerlink" title="安装 centos-release-scl"></a>安装 centos-release-scl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install centos-release-scl</span><br></pre></td></tr></table></figure><h3 id="配置-repo-文件"><a href="#配置-repo-文件" class="headerlink" title="配置 repo 文件"></a>配置 repo 文件</h3><p>调整 <code>/etc/yum.repos.d/CentOS-SCLo-scl.repo</code></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[centos-sclo-sclo]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="number">7</span> - SCLo sclo</span><br><span class="line"><span class="attr">baseurl</span>=https://mirrors.aliyun.com/centos/<span class="number">7</span>/sclo/x<span class="number">86_64</span>/sclo/</span><br><span class="line"><span class="comment"># mirrorlist=http://mirrorlist.centos.org?arch=$basearch&amp;release=7&amp;repo=sclo-sclo</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo</span><br></pre></td></tr></table></figure><p>调整 <code>/etc/yum.repos.d/CentOS-SCLo-scl-rh.repo</code>，注意 <code>baseurl</code> 地址末尾的 <code>/rh/</code></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[centos-sclo-rh]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="number">7</span> - SCLo rh</span><br><span class="line"><span class="attr">baseurl</span>=https://mirrors.aliyun.com/centos/<span class="number">7</span>/sclo/x<span class="number">86_64</span>/rh/</span><br><span class="line"><span class="comment"># mirrorlist=http://mirrorlist.centos.org?arch=$basearch&amp;release=7&amp;repo=sclo-rh</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo</span><br></pre></td></tr></table></figure><h3 id="刷新缓存"><a href="#刷新缓存" class="headerlink" title="刷新缓存"></a>刷新缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="安装配置-devtoolset"><a href="#安装配置-devtoolset" class="headerlink" title="安装配置 devtoolset"></a>安装配置 devtoolset</h2><h3 id="安装-devtoolset"><a href="#安装-devtoolset" class="headerlink" title="安装 devtoolset"></a>安装 devtoolset</h3><p>devtoolset 的安装规律如下：</p><ul><li><code>gcc 7.x</code> 对应 <code>devtoolset-7-gcc*</code></li><li><code>gcc 8.x</code> 对应 <code>devtoolset-8-gcc*</code></li><li><code>gcc 9.x</code> 对应 <code>devtoolset-9-gcc*</code></li><li><code>gcc 10.x</code> 对应 <code>devtoolset-10-gcc*</code></li></ul><p>以此类推。例如安装 gcc 9.x，运行以下命令执行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y devtoolset-9-gcc*</span><br></pre></td></tr></table></figure><h3 id="激活-devtoolset"><a href="#激活-devtoolset" class="headerlink" title="激活 devtoolset"></a>激活 devtoolset</h3><p>你可以一次性安装多个版本的 devtoolset 需要的时候执行下面的激活命令，此处以 devtoolset-9 为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scl enable devtoolset-9 bash</span><br></pre></td></tr></table></figure><p>如果不想每次都要执行激活命令的话可以在 <code>$HOME/.bashrc</code> 下加入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;source /opt/rh/devtoolset-9/enable&#x27; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="确认-GCC-版本"><a href="#确认-GCC-版本" class="headerlink" title="确认 GCC 版本"></a>确认 GCC 版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc -v</span></span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">COLLECT_LTO_WRAPPER=/opt/rh/devtoolset-9/root/usr/libexec/gcc/x86_64-redhat-linux/9/lto-wrapper</span><br><span class="line">Target: x86_64-redhat-linux</span><br><span class="line">Configured with: ../configure --enable-bootstrap --enable-languages=c,c++,fortran,lto --prefix=/opt/rh/devtoolset-9/root/usr --mandir=/opt/rh/devtoolset-9/root/usr/share/man --infodir=/opt/rh/devtoolset-9/root/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-shared --enable-threads=posix --enable-checking=release --enable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-gcc-major-version-only --with-linker-hash-style=gnu --with-default-libstdcxx-abi=gcc4-compatible --enable-plugin --enable-initfini-array --with-isl=/builddir/build/BUILD/gcc-9.3.1-20200408/obj-x86_64-redhat-linux/isl-install --disable-libmpx --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 9.3.1 20200408 (Red Hat 9.3.1-2) (GCC)</span><br></pre></td></tr></table></figure><h2 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h2><p>按照以上的实践步骤形成的自动升级的附加脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">source</span> /etc/os-release</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$VERSION_ID</span> != <span class="string">&quot;7&quot;</span> ]] &amp;&amp; [[ <span class="variable">$ID</span> != <span class="string">&#x27;centos&#x27;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Error: This addon can only be applied on centos7. Exiting...&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">SCLO_BASEURL=<span class="string">&quot;https://mirrors.aliyun.com/centos/<span class="variable">$&#123;VERSION_ID&#125;</span>/sclo/x86_64/sclo/&quot;</span></span><br><span class="line">RH_BASEURL=<span class="string">&quot;https://mirrors.aliyun.com/centos/<span class="variable">$&#123;VERSION_ID&#125;</span>/sclo/x86_64/rh/&quot;</span></span><br><span class="line">DEVTOOLSET_VERSION=9</span><br><span class="line"><span class="built_in">sudo</span> yum install -y centos-release-scl</span><br><span class="line"><span class="built_in">sudo</span> sed -i.bak <span class="string">&quot;s~#\s*baseurl=.*mirror.*~baseurl=<span class="variable">$&#123;SCLO_BASEURL&#125;</span>~; s~^\(mirrorlist\)~# \1~&quot;</span> \</span><br><span class="line">/etc/yum.repos.d/CentOS-SCLo-scl.repo</span><br><span class="line"><span class="built_in">sudo</span> sed -i.bak <span class="string">&quot;s~#\s*baseurl=.*mirror.*~baseurl=<span class="variable">$&#123;RH_BASEURL&#125;</span>~; s~^\(mirrorlist\)~# \1~&quot;</span> \</span><br><span class="line">/etc/yum.repos.d/CentOS-SCLo-scl-rh.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"><span class="built_in">sudo</span> yum install -y <span class="string">&quot;devtoolset-<span class="variable">$&#123;DEVTOOLSET_VERSION&#125;</span>-gcc*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-<span class="variable">$&#123;DEVTOOLSET_VERSION&#125;</span>/enable&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://juejin.cn/post/7506436235511988235">CentOS 7升级gcc，2025年无坑版</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Win11的详细步骤</title>
      <link href="/2025/05/17/win11-install-key-steps/"/>
      <url>/2025/05/17/win11-install-key-steps/</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何在非Windows主机环境下虚拟化安装和配置 Windows 11 操作系统。 </p><h2 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h2><ol><li><p>如何在无激活码的情况下完成系统安装</p></li><li><p>如何绕过微软账号登陆验证</p></li></ol><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li><p>主机操作系统：macOS Sequoia (15.4.1)</p></li><li><p>虚拟机软件：VMware Fusion 13.6.3</p></li><li><p>Windows 安装镜像：Win11_24H2_Chinese_Simplified_x64.iso</p></li></ul><h2 id="详细安装步骤"><a href="#详细安装步骤" class="headerlink" title="详细安装步骤"></a>详细安装步骤</h2><span id="more"></span><h3 id="一、获取-Windows-11-磁盘映像（ISO"><a href="#一、获取-Windows-11-磁盘映像（ISO" class="headerlink" title="一、获取 Windows 11 磁盘映像（ISO)"></a>一、获取 Windows 11 磁盘映像（ISO)</h3><p>访问以下地址，根据指引从微软官方下载win11镜像文件。</p><p><a href="https://www.microsoft.com/zh-cn/software-download/windows11">https://www.microsoft.com/zh-cn/software-download/windows11</a></p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-20-23-44-image.png"></p><p>我们选择直接下载 iso 映像文件，所以直接跳转到<code>下载适用于 x64 设备的 Windows 11 磁盘映像 (ISO)</code>章节，在下拉框中选择<code>Windows 11（适用于 x64 设备的多版本 ISO）</code>。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-20-59-07-image.png"></p><p>点击<code>立即下载</code>按钮之后，页面会刷新出<code>选择产品语言</code>选项，选择<code>简体中文</code>，点击<code>确定</code>按钮完成下载。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-03-19-image.png"></p><p>最终下载的文件名类似于 <code>Win11_24H2_Chinese_Simplified_x64.iso</code>，有了系统映像文件，接下来我们开始执行安装过程。</p><h3 id="二、创建虚拟机"><a href="#二、创建虚拟机" class="headerlink" title="二、创建虚拟机"></a>二、创建虚拟机</h3><p>启动 <code>VMware Fusion</code>，如图所示，点选<code>新建</code>：</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-08-24-image.png"></p><p>之后选择<code>从光盘或映像中安装</code>，点击<code>继续</code>按钮。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-10-39-image.png"></p><p>选择我们刚刚下载的映像文件之后，点击<code>继续</code>按钮</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-11-37-image.png"></p><p>固件类型保持默认选项，即 UEFI，点击<code>继续</code>按钮</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-12-35-image.png"></p><p>此处选择<code>Partial Encryption</code>，点击<code>Auto Generate Password</code>按钮将会自动生成加密密码，密码我们不需要刻意去记录，直接勾选<code>Remember Password and store it in Mac&#39;s Keychain</code> 选项即可，最后点击<code>继续</code>按钮。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-15-22-image.png"></p><p>下图是我根据向导默认生成的虚拟机配置汇总，如果想要调整，可以继续点击<code>自定设置</code>按钮进行配置，最后点击<code>完成</code>按钮。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-17-04-image.png"></p><h3 id="三、安装Windows-11"><a href="#三、安装Windows-11" class="headerlink" title="三、安装Windows 11"></a>三、安装Windows 11</h3><p>双击刚刚我们创建的虚拟机之后，会显示如下信息，此时要快速点击回车按钮进入光驱引导，否则会显示timeout超时。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-19-21-image.png"></p><p>语言设置保持默认，点击下一步：</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-22-18-image.png"></p><p>键盘设置默认，点击下一步：</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-22-57-image.png"></p><p>选择<code>安装 Windows11</code>，勾选 I agree….，点击下一步：</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-23-55-image.png"></p><h4 id="产品秘钥步骤"><a href="#产品秘钥步骤" class="headerlink" title="产品秘钥步骤"></a>产品秘钥步骤</h4><p>这个步骤比较重要，如果手上暂时没有可用的产品秘钥，就在左下角勾选<code>我没有产品秘钥</code>。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-25-38-image.png"></p><p>接下来选择安装的 Windows 版本，此处选择<code>Windows 11 专业版</code>，点击下一步。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-27-15-image.png"></p><p>接受条款，点击下一步。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-28-06-image.png"></p><p>在Windows的安装位置步骤中，全部保持默认即可，稍后会自动格式化磁盘，点击下一步。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-30-08-image.png"></p><p>此处已准备就绪，我们点击<code>安装</code>按钮开始执行安装。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-31-57-image.png"></p><p>执行安装过程略。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-33-07-image.png"></p><h3 id="四、配置Windows-11"><a href="#四、配置Windows-11" class="headerlink" title="四、配置Windows 11"></a>四、配置Windows 11</h3><h4 id="绕过微软账号登陆验证"><a href="#绕过微软账号登陆验证" class="headerlink" title="绕过微软账号登陆验证"></a>绕过微软账号登陆验证</h4><p>在安装完成之后就到了配置Windows 11的配置向导，首先弹出的国家（地区）的设置向导</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-51-10-image.png"></p><p>从现在开始，我们就可以实施<code>绕过微软账号登陆</code>的步骤了，具体如下：</p><ol><li><p>断开网络连接（可直接禁掉主机的wifi）</p></li><li><p>按 <code>CTRL</code> + <code>F10</code> 调出终端窗口</p></li><li><p>输入命令：<code>oobe\bypassnro.cmd</code></p></li><li><p>重启虚拟机（第3步执行完应该会自动重启）</p></li></ol><p>之后正常配置到网络连接步骤后，在此处要点击<code>我没有 Internet 连接</code>，之后就可以设置本地账号了！</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-21-59-59-image.png"></p><p>此时输入你的本地账号名称：</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-22-01-32-image.png"></p><p>再输入本地账户的密码：</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-22-02-06-image.png"></p><p>三个安全问题：</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-22-02-52-image.png"></p><p>隐私设置，全部不勾选，之后点击接受：</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-22-04-18-image.png"></p><h4 id="同意个人数据跨境传输"><a href="#同意个人数据跨境传输" class="headerlink" title="同意个人数据跨境传输"></a>同意个人数据跨境传输</h4><p>这个选项一般点击<code>下一步</code>按钮即可，但是如果你不想同意这么做，可以参考下面的指引进行操作：</p><p><a href="https://baijiahao.baidu.com/s?id=1828346126065690979&wfr=spider&for=pc">跳过电脑个人数据跨境传输提示的方法</a></p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-22-09-46-image.png"></p><p>好了，一个完整的 Windows 11操作系统就已经安装完成了！至于产品激活码之类的事情，就不过多讲了，大家自行发挥。</p><p><img data-src="/2025/05/17/win11-install-key-steps/2025-05-17-22-11-25-image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Next 主题安装配置</title>
      <link href="/2023/12/26/hexo-install-theme/"/>
      <url>/2023/12/26/hexo-install-theme/</url>
      
        <content type="html"><![CDATA[<p>本文记录 Hexo 的 NexT 主题的安装和配置过程，使用的是官方仓库 README 的指引进行。</p><p><a href="https://github.com/theme-next/hexo-theme-next">theme-next/hexo-theme-next: Elegant and powerful theme for Hexo. (github.com)</a></p><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li><code>hexo</code> ：安装部署可参考文章 <a href="https://eliu.github.io/2021/03/11/hexo-quickstart/">Hexo 快速入门</a></li></ul><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h3><p>Hexo NexT 主题可通过两种方式安装，一种是直接克隆官方仓库到 {hexo-site}/themes/next 下；一种是通过 npm 安装到 Hexo 主目录。本文使用第二种方式进行安装。</p><blockquote><p>提示：<code>&#123;hexo-site&#125;</code> 指的是 Hexo 生成的博客项目主目录，例如 <code>/path/to/my-hexo-blog</code></p></blockquote><p>使用 npm 安装 Hexo NexT 主题的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> &#123;hexo-site&#125;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-theme-next</span></span><br></pre></td></tr></table></figure><blockquote><p>npm 国内加速镜像配置：<code>npm config set registry http://registry.npmmirror.com</code></p></blockquote><span id="more"></span><h3 id="启用-NexT-主题"><a href="#启用-NexT-主题" class="headerlink" title="启用 NexT 主题"></a>启用 NexT 主题</h3><p>编辑 Hexo 项目主目录下的 <code>_config.yml</code> 配置文件，并修改以下属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><h3 id="定制-NexT-主题"><a href="#定制-NexT-主题" class="headerlink" title="定制 NexT 主题"></a>定制 NexT 主题</h3><p>NexT 主题在默认情况下不需要进行任何的改动，主题就可以直接应用到 Hexo 项目中。但如果你想做一些定制化也是完全可以的。接下来我们拷贝主题的配置文件到 hexo 主目录，文件格式为 <code>_config.&#123;theme_name&#125;.yml</code>。对于 NexT 主题，该配置文件的名称应为 <code>_config.next.yml</code>。我们准备定制以下内容：</p><ol><li>主题风格改为 Gemini</li><li>支持暗黑模式</li><li>显示首页、标签和分类</li><li>个性化我的头像</li><li>启用社交网络连接</li><li>代码块显示风格</li><li>GitHub 入口（Follow me on GitHub)</li><li>增加本地搜索功能，可参考 <a href="https://www.jianshu.com/p/d388119a90ec">Hexo增加搜索功能 - 简书 (jianshu.com)</a></li></ol><p>我们打开配置文件 <code>_config.next.yml</code> 并需改配置如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/uploads/avatar.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/eliu</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:eliuhy@163.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">a11y-light</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">a11y-dark</span></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/eliu</span></span><br></pre></td></tr></table></figure><p>这里特别注意的是头像的定制化，你需要将你的头像文件，例如 <code>avatar.png</code> 上传到 <code>&#123;hexo-site&#125;/source/uploads/</code> 目录下，目录结构如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;hexo-site&#125;</span><br><span class="line">└── source</span><br><span class="line">    └── uploads</span><br><span class="line">        └── avatar.png</span><br></pre></td></tr></table></figure><p>另外，不要启用 motion 动画，有 bug…</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">motion:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在 Bash 中如何读取配置文件</title>
      <link href="/2023/12/20/read-property-file-in-bash/"/>
      <url>/2023/12/20/read-property-file-in-bash/</url>
      
        <content type="html"><![CDATA[<h2 id="Properties-文件"><a href="#Properties-文件" class="headerlink" title="Properties 文件"></a>Properties 文件</h2><p>一种简单的键值对配置文件形式是 properties 文件，可以被 Java 语言原生支持读取。我们可以使用它为项目进行简单的配置管理，典型的 Properties 文件如下所示：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.properties</span></span><br><span class="line"><span class="comment"># Valid values are info, verbose, debug</span></span><br><span class="line"><span class="attr">logging.level</span>=<span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">setup.hosts.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">installer.maven.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">installer.git.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>那么像这种文件，我们如何在 Bash 环境下进行读取和使用呢？本文接下来将逐步分析实现的过程。</p><span id="more"></span><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>我们以刚刚所展示的 Properties 文件实例来进行分析，不难发现这种文件一般包含以下几个特点：</p><ol><li>允许有注释行，该行以 <code>#</code> 开头且不包含实际的配置项</li><li>允许有空行</li><li>配置项以等号 <code>=</code> 作为分割符，左侧为属性名称，右侧为值</li><li><code>=</code> 两边去除空白字符（可选实现）</li></ol><p>好了，知道所有的特征之后，接下来我们着手进行代码的实现。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="过滤注释行和空行"><a href="#过滤注释行和空行" class="headerlink" title="过滤注释行和空行"></a>过滤注释行和空行</h3><p>这两种情况都属于无效行，应该被过滤剔除。由于我们是在 GNU/Linux 和 Bash 环境下进行实现，那么可以想到的方法是先把文件读到内存或者管道中，然后逐层进行过滤。读取文件我们可以使用 <code>cat</code> 命令，而对于过滤无效行这种任务的话，GNU/Linux 下有很多工具可以用，如 <code>grep</code> 和  <code>sed</code> 等等。我们此处选择的是 <code>sed</code> 因为它允许通过 <code>-e</code> 参数来指定多条正则表达式条件进行操作。接下来我们对正则表达式进行逐个击破。</p><p>判断注释行：以 <code>#</code> 开头的全部删除，正则表达式为 <code>/^#/</code></p><div style="background-color:#EEE;text-align:center"><img data-src="properties_pattern_01.png" /></div><p>判断空行：仅包含0个或多个空格符的行，正则表达式为 <code>/^\s*$/</code></p><div style="background-color:#EEE;text-align:center"><img data-src="properties_pattern_02.png" /></div><p>最后，在 sed 中剔除命中的行时使用操作符 <code>d</code> ，例如删除注释行，我们可以写成 <code>/^#/d</code>，以下就是我们的最终的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> config.properties | sed -e <span class="string">&#x27;/^#/d&#x27;</span> -e <span class="string">&#x27;/^\s*$/d&#x27;</span></span><br></pre></td></tr></table></figure><p>验证结论：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> config.properties | sed -e <span class="string">&#x27;/^#/d&#x27;</span> -e <span class="string">&#x27;/^\s*$/d&#x27;</span></span><br><span class="line">logging.level=info</span><br><span class="line">setup.hosts.enabled=<span class="literal">false</span></span><br><span class="line">installer.maven.enabled=<span class="literal">true</span></span><br><span class="line">installer.git.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="解析配置项"><a href="#解析配置项" class="headerlink" title="解析配置项"></a>解析配置项</h3><p>配置项是 <code>key=value</code> 形式，我们可以循环管道中过滤后的结果中的每一行，然后按等号 <code>=</code> 进行分割。我们可以利用 <code>while</code> 和 <code>read</code> 结合起来进行读取，read 命令可以以环境变量 <code>IFS</code> 的值作为分隔符进行拆解和读取到指定的变量中。例如下面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ IFS=<span class="string">&#x27;=&#x27;</span> <span class="built_in">read</span> -r prop value</span><br><span class="line"><span class="comment"># 输入 a=b 然后回车</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$prop</span> -&gt; <span class="variable">$value</span>&quot;</span></span><br><span class="line">a -&gt; b</span><br></pre></td></tr></table></figure><p>结合前面的成果和 while 循环，我们目前的解析过程可以写成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> config.properties \</span><br><span class="line">| sed -e <span class="string">&#x27;/^#/d&#x27;</span> -e <span class="string">&#x27;/^\s*$/d&#x27;</span> \</span><br><span class="line">| <span class="keyword">while</span> IFS=<span class="string">&#x27;=&#x27;</span> <span class="built_in">read</span> -r prop value; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$prop</span> -&gt; <span class="variable">$value</span>&quot;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logging.level -&gt; info</span><br><span class="line">setup.hosts.enabled -&gt; false</span><br><span class="line">installer.maven.enabled -&gt; true</span><br><span class="line">installer.git.enabled -&gt; true</span><br></pre></td></tr></table></figure><p>看起来符合我们的预期，因为我们使用 <code>echo</code> 已经输出了我们想要的读取的值，完美！然而，真的是这样么？到目前为止，我们只是解析出来了配置项的值，但是还没有进行存储以备其他过程进一步使用。</p><h3 id="值不见了？"><a href="#值不见了？" class="headerlink" title="值不见了？"></a>值不见了？</h3><p>接下来我们来声明一个关联数组，我们准备用它来存储所有的配置项到内存中，以便随时使用。以下是我们的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">declare</span> -A config</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> config.properties \</span><br><span class="line">| sed -e <span class="string">&#x27;/^#/d&#x27;</span> -e <span class="string">&#x27;/^\s*$/d&#x27;</span> \</span><br><span class="line">| <span class="keyword">while</span> IFS=<span class="string">&#x27;=&#x27;</span> <span class="built_in">read</span> -r prop value; <span class="keyword">do</span></span><br><span class="line">config[<span class="variable">$prop</span>]=<span class="variable">$value</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;config[@]&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>读者可以实际执行一下，结果竟然是<strong>没有任何信息输出</strong>！这里给出根因：</p><blockquote><p>根因：<code>...| while ... do; ... done</code> 管道命令 <code>|</code> 会调用内核的 fork 产生一个子进程，在子进程中所进行的while 循环中的任何的变量赋值操作的作用域仅在子进程内部，语句执行完之后，子进程也随之被销毁。所以尝试在此处进行的赋值操作没有任何效果。</p></blockquote><p>好了，根因我们知道了，那么我们要如何解决呢？对，我们不用管道，我们要使用 bash 中的“输入转向”功能来实现我们的目的，结构如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ...; <span class="keyword">do</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">done</span> &lt; /path/to/file</span><br></pre></td></tr></table></figure><p>但是这里 while 循环读取的是输入设备是文件，而我们在读取文件之后是要做系列过滤加工的，上面的这种形式显然不能满足要求。别着急，Bash 还为我们提供了另外一种产生“输入”的方式：<code>&lt;(command)</code>，那么改造后的形式就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ...; <span class="keyword">do</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">done</span> &lt; &lt;(<span class="built_in">command</span>)</span><br></pre></td></tr></table></figure><h3 id="去除等号两边的空白字符"><a href="#去除等号两边的空白字符" class="headerlink" title="去除等号两边的空白字符"></a>去除等号两边的空白字符</h3><p>这是一个可选需求，因为正常的属性文件格式要求属性名称、等号和值之间不能有空格。不过笔者习惯使用自由度大一点的配置格式，允许有些空白字符来美化一下格式。为了更直观的展示这个场景，我们假设用 <code>#</code> 来表示空白字符话，目标字符串就是 <code>###foo##</code>。如果我们要去除两边的空白字符（此处是符号#）的话，下面的正则表达式可以完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先剔除左边的符号#，再剔除右侧的符号#</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;###foo##&quot;</span> | sed -e <span class="string">&#x27;s/^#*//&#x27;</span> -e <span class="string">&#x27;s/#*$//&#x27;</span></span><br><span class="line">foo</span><br></pre></td></tr></table></figure><p>整理成函数的话就是如下形式，函数接受一个带处理的字符串 $1，返回去除空白字符的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Trim both leading and trailing whitespaces</span></span><br><span class="line"><span class="comment"># Parameters</span></span><br><span class="line"><span class="comment"># $1 -&gt; string to be trimmed</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">trimspaces</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$1</span> | sed -e <span class="string">&#x27;s/^[[:space:]]*//&#x27;</span> -e <span class="string">&#x27;s/[[:space:]]*$//&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>套用到我们的需求之后，最终形成的代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">declare</span> -A config</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">trimspaces</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$1</span> | sed -e <span class="string">&#x27;s/^[[:space:]]*//&#x27;</span> -e <span class="string">&#x27;s/[[:space:]]*$//&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> IFS=<span class="string">&#x27;=&#x27;</span> <span class="built_in">read</span> -r prop value; <span class="keyword">do</span></span><br><span class="line">  config[$(trimspaces <span class="variable">$prop</span>)]=$(trimspaces <span class="variable">$value</span>)</span><br><span class="line"><span class="keyword">done</span> &lt; &lt;(<span class="built_in">cat</span> config.properties | sed -e <span class="string">&#x27;/^\s*$/d&#x27;</span> -e <span class="string">&#x27;/^#/d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!config[@]&#125;</span></span><br><span class="line"><span class="comment"># 输出结果：installer.git.enabled logging.level setup.hosts.enabled installer.maven.enabled</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;config[@]&#125;</span></span><br><span class="line"><span class="comment"># 输出结果：true info false true</span></span><br></pre></td></tr></table></figure><p>至此，所有问题都已解决。在我的项目 <a href="https://github/eliu/devbox">devbox</a> 中，配置管理模块 <code>config.sh</code> 就是使用上面的解决方案读取的配置文件。</p><p><a href="https://github.com/eliu/devbox/blob/master/lib/modules/config.sh">devbox/lib/modules/config.sh at master · eliu/devbox (github.com)</a></p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>正则表达式可视化图片由 <a href="https://jex.im/regulex/#">Regulex - JavaScript Regular Expression Visualizer</a> 生成，特此感谢 (R.I.P Jex)！</p><p>End~</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内软件和镜像源集合</title>
      <link href="/2023/11/21/mirrors-collection/"/>
      <url>/2023/11/21/mirrors-collection/</url>
      
        <content type="html"><![CDATA[<p>本文将持续更新目前已知的可以设置的国内软件源以及镜像源的设置方法，方便作者自己备查和减轻开发人员搭建环境的阻碍。</p><h2 id="GNU-Linux-发行版软件源"><a href="#GNU-Linux-发行版软件源" class="headerlink" title="GNU/Linux 发行版软件源"></a>GNU/Linux 发行版软件源</h2><h3 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">run as root or <span class="built_in">sudo</span></span></span><br><span class="line">rm -fr /etc/yum.repos.d/*.repo</span><br><span class="line">curl -sSL https://mirrors.aliyun.com/repo/Centos-7.repo -o /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line">sed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; \</span><br><span class="line">       -e &#x27;/mirrors.aliyuncs.com/d&#x27; \</span><br><span class="line">       /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line">curl -sSL https://mirrors.aliyun.com/repo/epel-7.repo -o /etc/yum.repos.d/epel.repo</span><br><span class="line">curl -sSL https://mirrors.aliyun.com/ius/ius-7.repo -o /etc/yum.repos.d/ius.repo</span><br><span class="line">sed -i &#x27;s repo.ius.io mirrors.aliyun.com/ius/ g&#x27; /etc/yum.repos.d/ius.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="RockyLinux"><a href="#RockyLinux" class="headerlink" title="RockyLinux"></a>RockyLinux</h3><p>适用 RockyLinux 所有主流版本</p><p>配置指引：<a href="https://developer.aliyun.com/mirror/rockylinux">https://developer.aliyun.com/mirror/rockylinux</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">run as root or <span class="built_in">sudo</span></span></span><br><span class="line">sed -i.bak \</span><br><span class="line">    -e &#x27;s|^mirrorlist=|#mirrorlist=|g&#x27; \</span><br><span class="line">    -e &#x27;s|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g&#x27; \</span><br><span class="line">    /etc/yum.repos.d/rocky*.repo</span><br></pre></td></tr></table></figure><p>之后运行 <code>sudo dnf makecache</code> 更新缓存。</p><h3 id="AlmaLinux"><a href="#AlmaLinux" class="headerlink" title="AlmaLinux"></a>AlmaLinux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://developer.aliyun.com/mirror/almalinux</span></span><br><span class="line">sed -i.bak \</span><br><span class="line">-e &#x27;s|^mirrorlist=|#mirrorlist=|g&#x27; \</span><br><span class="line">-e &#x27;s|^#\s*baseurl=https\?://repo.almalinux.org|baseurl=https://mirrors.aliyun.com|g&#x27; \</span><br><span class="line">/etc/yum.repos.d/almalinux*.repo</span><br></pre></td></tr></table></figure><p>之后运行 <code>sudo dnf makecache</code> 更新缓存。</p><h2 id="设置-DNS"><a href="#设置-DNS" class="headerlink" title="设置 DNS"></a>设置 DNS</h2><p>刚刚安装完某个 GNU/Linux 发行版之后，发现软件包安装时跑不动或者经常超时，这时我们需要设置一下上网的网卡的DNS。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">run as root or <span class="built_in">sudo</span></span></span><br><span class="line">network_uuid=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到自动上网的那个网卡</span></span><br><span class="line">for uuid in $(nmcli -get-values UUID conn show --active); do</span><br><span class="line">  if [ &quot;auto&quot; = &quot;$(nmcli -terse conn show uuid $uuid | grep ipv4.method | awk -F &#x27;[:/]&#x27; &#x27;&#123;print $2&#125;&#x27;)&quot; ]; then</span><br><span class="line">    network_uuid=$uuid</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加 DNS</span></span><br><span class="line">nmcli con mod $network_uuid +ipv4.dns 114.114.114.114</span><br><span class="line">nmcli con mod $network_uuid +ipv4.dns 8.8.8.8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启网络</span></span><br><span class="line">systemctl restart NetworkManager</span><br></pre></td></tr></table></figure><h2 id="npm-软件源"><a href="#npm-软件源" class="headerlink" title="npm 软件源"></a>npm 软件源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span></span><br></pre></td></tr></table></figure><h2 id="Python-PIP-软件源"><a href="#Python-PIP-软件源" class="headerlink" title="Python PIP 软件源"></a>Python PIP 软件源</h2><p>安装的软件包的时候直接用 <code>-i</code> 制定源即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip3 install some-package -i https://mirrors.aliyun.com/pypi/simple</span></span><br></pre></td></tr></table></figure><h2 id="Maven-仓库"><a href="#Maven-仓库" class="headerlink" title="Maven 仓库"></a>Maven 仓库</h2><p>阿里开源镜像站：<a href="https://mirrors.aliyun.com/apache/maven/">apache-maven安装包下载_开源镜像站-阿里云 (aliyun.com)</a></p><h2 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h2><h3 id="Podman"><a href="#Podman" class="headerlink" title="Podman"></a>Podman</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">run as root or <span class="built_in">sudo</span></span></span><br><span class="line">mv /etc/containers/registries.conf /etc/containers/registries.conf.bak</span><br><span class="line">cat &gt; /etc/containers/registries.conf &lt;&lt;&lt; EOF</span><br><span class="line">unqualified-search-registries = [&quot;docker.io&quot;]</span><br><span class="line"></span><br><span class="line">[[registry]]</span><br><span class="line">prefix = &quot;docker.io&quot;</span><br><span class="line">insecure = false</span><br><span class="line">blocked = false</span><br><span class="line">location = &quot;docker.io&quot;</span><br><span class="line">[[registry.mirror]]</span><br><span class="line">location = &quot;hub-mirror.c.163.com&quot;</span><br><span class="line">[[registry.mirror]]</span><br><span class="line">location = &quot;registry.docker-cn.com&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">run as root or <span class="built_in">sudo</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用阿里云镜像源安装 docker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://yq.aliyun.com/articles/110806?spm=a2c4e.11153940.0.0.108e435aDMp0n2&amp;p=4#comments</span></span><br><span class="line">&#123;</span><br><span class="line">export VERSION=&quot;17.09&quot; # docker ce version</span><br><span class="line">curl -sSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置国内 docker 镜像源</span></span><br><span class="line">mv /etc/docker/daemon.json /etc/docker/daemon.json.bak</span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://8km017g6.mirror.aliyuncs.com&quot;,</span><br><span class="line">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="Minikube"><a href="#Minikube" class="headerlink" title="Minikube"></a>Minikube</h3><p><a href="https://github.com/AliyunContainerService/minikube">AliyunContainerService/minikube: 普大喜奔，官方Minikube提供了完整对国内用户支持，完美支持Addon组件。 建议参考 https://yq.aliyun.com/articles/221687 或 https://github.com/AliyunContainerService/minikube/wiki 最新支持minikube v1.24.0</a></p><p>Wiki: <a href="https://github.com/AliyunContainerService/minikube/wiki">Home · AliyunContainerService/minikube Wiki (github.com)</a></p><p>引用 Wiki 的一段话：</p><blockquote><p>为了方便大家开发和体验Kubernetes，社区提供了可以在本地部署的开发环境 <a href="https://github.com/kubernetes/minikube">Minikube</a>。由于网络访问原因，很多朋友无法直接使用minikube进行实验。在v1.24.0的官方 Minikube 中，已经合并了由阿里云团队支持的方案，可以帮助大家利用阿里云的服务来获取所需Docker镜像，二进制文件和配置，也可以完美支持 Minikube 丰富的 addon 组件！</p></blockquote><h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><p>适用国内网络环境下安装 K8S 集群的工具：<a href="https://github.com/TimeBye/kubeadm-ha">TimeBye/kubeadm-ha</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国内源 </tag>
            
            <tag> 镜像源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于疫情</title>
      <link href="/2023/01/11/personal-notes-002/"/>
      <url>/2023/01/11/personal-notes-002/</url>
      
        <content type="html"><![CDATA[<p>2022年12月8日，中国的疫情政策全面放开，逐步取消了健康码和行程吗的查验。老百姓被允许自由出入，之后有人🐑了，杨过了，杨康了，王重阳了。。。我也🐑了。</p><span id="more"></span><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>第一天下午觉得肌肉有些酸痛，头有些晕。问了同事，同事说也有同感，感觉自己要🐑。当天晚上开始发烧。</p><p>第二天全天肌肉酸痛、发烧、头痛并伴随咳嗽，无食欲，在床上躺了一天。</p><p>第三天退烧，开始咳痰，可以吃点东西了，但失去味觉和嗅觉，双肺和腰疼痛。</p><p>第四天至第七天逐步恢复，但伴随咳嗽多痰和失去味觉和嗅觉。</p><p>第八天杨康，但味觉和嗅觉依然不工作，回到公司继续搬砖。</p><p>在此期间，我的家人无一幸免，全🐑，但也同样很快就康复了。我周边的同事和朋友没有听说得白肺的。</p><h2 id="悲伤"><a href="#悲伤" class="headerlink" title="悲伤"></a>悲伤</h2><p>就这样过去了一个月，也听说大家基本都🐑过了一次且康复时，老家相继传来了噩耗。</p><ul><li><p>2023年1月9日，姥爷在老家病逝</p></li><li><p>2023年1月11日，大爷在老家病逝</p></li></ul><p>无比悲伤的同时，感叹老年人一旦得了新冠病毒，身体通常都会引发一系列的基础病，这些往往都是致命的因素。后来听说全国很多年纪大的人都被新冠夺走了生命，也感叹病毒的强大和生命的脆弱。</p><h2 id="向前看"><a href="#向前看" class="headerlink" title="向前看"></a>向前看</h2><p>转眼间到了2023年，回想自疫情爆发以来所经历过的这三年，很多事情早已物是人非。慨叹过，无奈过，迷茫过也无助过，甚至有时都在想人活着的意义究竟是什么。希望未来能有一座灯塔能照亮迷茫着的我。</p>]]></content>
      
      
      <categories>
          
          <category> 个人日记 </category>
          
          <category> 技术无关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>个人日记001-上班与下班</title>
      <link href="/2022/05/12/personal-notes-001/"/>
      <url>/2022/05/12/personal-notes-001/</url>
      
        <content type="html"><![CDATA[<p>这周搞错框架升级上线的日期，以为是本周六上线，这两天拼命的适配框架，闹了个乌龙。不过也好，手上的任务早做完早轻松（不知是否真的如此~）。今天下班前问了同事，才知本周不上线，看了一下时间，已经是晚上 9 点多了。。</p><p>大厂真的是人尽其用，每天安排给你的任务差不多到了 24 小时轮轴转也没法完成的地步。每周各种进度例会，每天被各种业务同事拉会看问题，问题种类五花八门。与此同时，自己手上还有开发要做，有仓库要守护，简直忙的不亦乐乎。</p><p>得知任务无需本周完成之后，反手就是起身打卡下班。外面下着雨，回去的路上突然被一个电话会议拉了进去，上来直接跟我说 UAT 测试有问题，让我上线跟他们看问题。不好意思，我已经下班了，有事明天再说，谢谢~</p><ul><li>看问题非要赶在晚上九点多看么</li><li>有测试问题处理要不要打提前量</li></ul><p>累过之后，渐渐学会区分上班和下班，也要学会说不。</p>]]></content>
      
      
      <categories>
          
          <category> 技术无关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吐槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 k3d 在本地运行 k8s</title>
      <link href="/2021/03/25/run-local-k8s-using-k3d/"/>
      <url>/2021/03/25/run-local-k8s-using-k3d/</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何使用 k3d 在本地快速启动一个 k8s 集群。k3d 是以容器的方式运行 K3s 集群的工具，K3s 是 Rancher 推出的经过 CNCF 认证的与 K8S 完全兼容的发行版，特点是轻量级，启动快，依赖少，适合边缘计算以及资源能力有限的机器上运行集群。k3d 的这种启动方式对平台依赖少，安装部署比较干净利落，理论上本地只需要一个 Docker 运行环境即可。</p><span id="more"></span><h2 id="安装过程介绍"><a href="#安装过程介绍" class="headerlink" title="安装过程介绍"></a>安装过程介绍</h2><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ul><li>操作系统：macOS Catalina (10.15.7)</li><li>容器环境：Docker Desktop for Mac 3.2.2</li><li>包管理工具：Homebrew</li></ul><h3 id="设置-Docker-镜像加速"><a href="#设置-Docker-镜像加速" class="headerlink" title="设置 Docker 镜像加速"></a>设置 Docker 镜像加速</h3><p>打开 Docker Desktop for Mac 的首选项界面，选择 Docker Engine，加入如下设置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://8km017g6.mirror.aliyuncs.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后点击 <code>Apply &amp; Restart</code> 重启 Docker。</p><h3 id="安装-k3d-和-kubectl"><a href="#安装-k3d-和-kubectl" class="headerlink" title="安装 k3d 和 kubectl"></a>安装 k3d 和 kubectl</h3><p>k3d 并不依赖于 kubectl，但是开发人员需要 kubectl 与 k3d 所创建的 k8s 集群进行通讯：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install kubectl</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install k3d</span></span><br></pre></td></tr></table></figure><h3 id="创建-k8s-集群"><a href="#创建-k8s-集群" class="headerlink" title="创建 k8s 集群"></a>创建 k8s 集群</h3><p>使用 <code>k3d cluster create</code> 命令即可新建集群，同样 k3d 也支持通过命令行选项传入更多的可选参数，此外，也可以经由一个 YAML 配置文件来统一进行配置。下面我们重点介绍以下后者的启动方式。</p><p>新建一个 YAML 格式的配置文件 <code>mycluster.yaml</code> 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">k3d.io/v1alpha2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Simple</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">mycluster</span></span><br><span class="line"><span class="attr">servers:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">agents:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">kubeAPI:</span></span><br><span class="line">  <span class="attr">hostPort:</span> <span class="string">&quot;6443&quot;</span> <span class="comment"># same as `--api-port &#x27;6443&#x27;`</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span><span class="string">:80</span>  <span class="comment"># same as `--port &#x27;8080:80@loadbalancer&#x27;`</span></span><br><span class="line">    <span class="attr">nodeFilters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loadbalancer</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8443</span><span class="string">:443</span> <span class="comment"># same as `--port &#x27;8443:443@loadbalancer&#x27;`</span></span><br><span class="line">    <span class="attr">nodeFilters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loadbalancer</span></span><br></pre></td></tr></table></figure><p>上面的配置文件指定了集群的名称、集群的节点个数（servers, agents) 以及向主机暴露的端口，更多的配置参数介绍请访问 <a href="https://k3d.io/usage/configfile/">Config File - k3d</a>。</p><p>接下来我们使用上面的配置文件 <code>mycluster.yaml</code> ，通过向 k3d 传入 <code>--config</code> 参数来创建我们的集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">k3d cluster create --config /path/to/mycluster.yaml</span></span><br><span class="line">INFO[0000] Using config file mycluster.yaml</span><br><span class="line">INFO[0000] Prep: Network</span><br><span class="line">INFO[0000] Created network &#x27;k3d-mycluster&#x27;</span><br><span class="line">INFO[0000] Created volume &#x27;k3d-mycluster-images&#x27;</span><br><span class="line">INFO[0001] Creating node &#x27;k3d-mycluster-server-0&#x27;</span><br><span class="line">INFO[0001] Creating node &#x27;k3d-mycluster-agent-0&#x27;</span><br><span class="line">INFO[0001] Creating node &#x27;k3d-mycluster-agent-1&#x27;</span><br><span class="line">INFO[0001] Creating LoadBalancer &#x27;k3d-mycluster-serverlb&#x27;</span><br><span class="line">INFO[0001] Starting cluster &#x27;mycluster&#x27;</span><br><span class="line">INFO[0001] Starting servers...</span><br><span class="line">INFO[0001] Starting Node &#x27;k3d-mycluster-server-0&#x27;</span><br><span class="line">INFO[0007] Starting agents...</span><br><span class="line">INFO[0007] Starting Node &#x27;k3d-mycluster-agent-0&#x27;</span><br><span class="line">INFO[0020] Starting Node &#x27;k3d-mycluster-agent-1&#x27;</span><br><span class="line">INFO[0028] Starting helpers...</span><br><span class="line">INFO[0028] Starting Node &#x27;k3d-mycluster-serverlb&#x27;</span><br><span class="line">INFO[0029] (Optional) Trying to get IP of the docker host and inject it into the cluster as &#x27;host.k3d.internal&#x27; for easy access</span><br><span class="line">INFO[0031] Successfully added host record to /etc/hosts in 4/4 nodes and to the CoreDNS ConfigMap</span><br><span class="line">INFO[0031] Cluster &#x27;mycluster&#x27; created successfully!</span><br><span class="line">INFO[0031] --kubeconfig-update-default=false --&gt; sets --kubeconfig-switch-context=false</span><br><span class="line">INFO[0031] You can now use it like this:</span><br><span class="line">kubectl config use-context k3d-mycluster</span><br><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure><p>接下来我们使用 <code>kubectl</code> 来查看集群 <code>mucluster</code> 中的基本信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME                     STATUS   ROLES                  AGE   VERSION</span><br><span class="line">k3d-mycluster-server-0   Ready    control-plane,master   29m   v1.20.2+k3s1</span><br><span class="line">k3d-mycluster-agent-0    Ready    &lt;none&gt;                 29m   v1.20.2+k3s1</span><br><span class="line">k3d-mycluster-agent-1    Ready    &lt;none&gt;                 29m   v1.20.2+k3s1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -n kube-system</span></span><br><span class="line">NAME                                      READY   STATUS      RESTARTS   AGE</span><br><span class="line">local-path-provisioner-7c458769fb-sr8dk   1/1     Running     0          29m</span><br><span class="line">metrics-server-86cbb8457f-t6kgk           1/1     Running     0          29m</span><br><span class="line">coredns-854c77959c-fnlsh                  1/1     Running     0          29m</span><br><span class="line">helm-install-traefik-cbwv7                0/1     Completed   0          29m</span><br><span class="line">svclb-traefik-pf5fz                       2/2     Running     0          28m</span><br><span class="line">svclb-traefik-5ctqj                       2/2     Running     0          28m</span><br><span class="line">svclb-traefik-fqdzl                       2/2     Running     0          28m</span><br><span class="line">traefik-6f9cbd9bd4-lpxvw                  1/1     Running     0          28m</span><br></pre></td></tr></table></figure><p>至此，一个最基本的 k8s 集群就已经创建好了。</p><h3 id="删除集群"><a href="#删除集群" class="headerlink" title="删除集群"></a>删除集群</h3><p>使用以下命令删除上面已经创建的集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k3d cluster delete mycluster</span><br></pre></td></tr></table></figure><h3 id="部署测试应用"><a href="#部署测试应用" class="headerlink" title="部署测试应用"></a>部署测试应用</h3><p>此处我们使用 k3d 官网提供的测试应用部署方法来启动一个 nginx：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl create deployment nginx --image=nginx:alpine</span></span><br><span class="line">deployment.apps/nginx created</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl create service clusterip nginx --tcp=80:80</span></span><br><span class="line">service/nginx created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span></span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  annotations:</span><br><span class="line">    ingress.kubernetes.io/ssl-redirect: &quot;false&quot;</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        pathType: Prefix</span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: nginx</span><br><span class="line">            port:</span><br><span class="line">              number: 80</span><br><span class="line">EOF</span><br><span class="line">ingress.networking.k8s.io/nginx created</span><br></pre></td></tr></table></figure><p>在浏览器打开 <a href="http://localhost:8080/">http://localhost:8080/</a> </p><p><img data-src="/2021/03/25/run-local-k8s-using-k3d/localhost-8080.png" alt="localhost-8080"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://k3d.io/#installation">k3d#installation</a></li><li><a href="https://k3d.io/usage/configfile/">Config File - k3d</a></li><li><a href="https://k3d.io/usage/guides/exposing_services/#1-via-ingress-recommended">Exposing Services - k3d</a></li><li><a href="https://xkcoding.com/2021/03/15/run-local-k8s-cluster-quickly.html">如何在本地快速启动一个 K8S 集群 | xkcoding</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k3d </tag>
            
            <tag> k3s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 kind 在本地运行 k8s</title>
      <link href="/2021/03/24/run-local-k8s-using-kind/"/>
      <url>/2021/03/24/run-local-k8s-using-kind/</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何使用 kind 在本地快速启动一个 k8s 集群。kind 是 Kubernetes in Docker 的简写，从名字上看很容易猜出 kind 的目标是将一个 k8s 集群以容器的方式部署在本机电脑上。这种方式对平台依赖少，安装部署比较干净利落，理论上本地只需要一个 Docker 运行环境即可。</p><span id="more"></span><h2 id="安装过程介绍"><a href="#安装过程介绍" class="headerlink" title="安装过程介绍"></a>安装过程介绍</h2><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ul><li>操作系统：macOS Catalina (10.15.7)</li><li>容器环境：Docker Desktop for Mac 3.2.2</li><li>包管理工具：Homebrew</li></ul><h3 id="设置-Docker-镜像加速"><a href="#设置-Docker-镜像加速" class="headerlink" title="设置 Docker 镜像加速"></a>设置 Docker 镜像加速</h3><p>打开 Docker Desktop for Mac 的首选项界面，选择 Docker Engine，加入如下设置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://8km017g6.mirror.aliyuncs.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后点击 <code>Apply &amp; Restart</code> 重启 Docker。</p><h3 id="安装-kind-和-kubectl"><a href="#安装-kind-和-kubectl" class="headerlink" title="安装 kind 和 kubectl"></a>安装 kind 和 kubectl</h3><p>kind 并不依赖于 kubectl，但是开发人员需要 kubectl 与 kind 所创建的 k8s 集群进行通讯：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install kubectl</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install kind</span></span><br></pre></td></tr></table></figure><h3 id="创建-k8s-集群"><a href="#创建-k8s-集群" class="headerlink" title="创建 k8s 集群"></a>创建 k8s 集群</h3><p>使用 <code>kind create cluster</code> 命令新建集群，注意 <code>--name</code> 选项指定集群的名称，若未指定该参数，<code>kind</code> 将会是默认的集群名称。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kind create cluster --name demo</span></span><br><span class="line">Creating cluster &quot;demo&quot; ...</span><br><span class="line"> ✓ Ensuring node image (kindest/node:v1.20.2) 🖼</span><br><span class="line"> ✓ Preparing nodes 📦</span><br><span class="line"> ✓ Writing configuration 📜</span><br><span class="line"> ✓ Starting control-plane 🕹️</span><br><span class="line"> ✓ Installing CNI 🔌</span><br><span class="line"> ✓ Installing StorageClass 💾</span><br><span class="line">Set kubectl context to &quot;kind-demo&quot;</span><br><span class="line">You can now use your cluster with:</span><br><span class="line"></span><br><span class="line">kubectl cluster-info --context kind-demo</span><br><span class="line"></span><br><span class="line">Thanks for using kind! 😊</span><br></pre></td></tr></table></figure><p>此时根据提示输入 <code>kubectl cluster-info --context kind-demo</code> 会显示集群当前的基本信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl cluster-info --context kind-demo</span></span><br><span class="line">Kubernetes control plane is running at https://127.0.0.1:56770</span><br><span class="line">KubeDNS is running at https://127.0.0.1:56770/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.</span><br></pre></td></tr></table></figure><p>查看集群 demo 中的节点信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get node</span></span><br><span class="line">NAME                 STATUS   ROLES                  AGE     VERSION</span><br><span class="line">demo-control-plane   Ready    control-plane,master   4m46s   v1.20.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -n kube-system</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-74ff55c5b-9gdc5                      1/1     Running   0          6m24s</span><br><span class="line">coredns-74ff55c5b-tnb5w                      1/1     Running   0          6m24s</span><br><span class="line">etcd-demo-control-plane                      1/1     Running   0          6m38s</span><br><span class="line">kindnet-4fmq9                                1/1     Running   0          6m24s</span><br><span class="line">kube-apiserver-demo-control-plane            1/1     Running   0          6m38s</span><br><span class="line">kube-controller-manager-demo-control-plane   1/1     Running   0          6m38s</span><br><span class="line">kube-proxy-6wrdz                             1/1     Running   0          6m24s</span><br><span class="line">kube-scheduler-demo-control-plane            1/1     Running   0          6m38s</span><br></pre></td></tr></table></figure><p>至此，一个最基本的 k8s 集群就已经创建好了。</p><h3 id="删除集群"><a href="#删除集群" class="headerlink" title="删除集群"></a>删除集群</h3><p>使用以下命令删除上面已经创建的集群 demo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kind delete cluster --name demo</span></span><br><span class="line">Deleting cluster &quot;demo&quot; ...</span><br></pre></td></tr></table></figure><h2 id="支持-Ingress-控制器的集群"><a href="#支持-Ingress-控制器的集群" class="headerlink" title="支持 Ingress 控制器的集群"></a>支持 Ingress 控制器的集群</h2><p>带有 Ingress Controller 的集群则需要向主机暴露 80 和 443 端口以便于主机可以通过域名进行访问。kind 除了可以支持通过命令行选项的方式创建集群，也支持使用配置文件的方式对集群进行更细致的配置，创建命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | kind create cluster --config=-</span><br><span class="line">kind: Cluster</span><br><span class="line">apiVersion: kind.x-k8s.io/v1alpha4</span><br><span class="line">nodes:</span><br><span class="line">- role: control-plane</span><br><span class="line">  kubeadmConfigPatches:</span><br><span class="line">  - |</span><br><span class="line">    kind: InitConfiguration</span><br><span class="line">    nodeRegistration:</span><br><span class="line">      kubeletExtraArgs:</span><br><span class="line">        node-labels: &quot;ingress-ready=true&quot;</span><br><span class="line">  extraPortMappings:</span><br><span class="line">  - containerPort: 80</span><br><span class="line">    hostPort: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">  - containerPort: 443</span><br><span class="line">    hostPort: 443</span><br><span class="line">    protocol: TCP</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>当然你也可以把这个配置信息以文件的形式保存，比如叫 <code>kind.yaml</code> ，那么创建命令就是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kind create cluster --config=kind.yaml</span><br></pre></td></tr></table></figure><h3 id="部署-NGINX-Ingress-控制器"><a href="#部署-NGINX-Ingress-控制器" class="headerlink" title="部署 NGINX Ingress 控制器"></a>部署 NGINX Ingress 控制器</h3><p>国内对于 GitHub 和 k8s.gcr.io 镜像仓库的访问速度不太理想，因此此处我们需要做一些针对于国内网络的准备工作。</p><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从阿里云镜像仓库拉取镜像</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull registry.aliyuncs.com/kubeadm-ha/ingress-nginx_controller:v0.43.0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名为官方镜像名称</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker tag registry.aliyuncs.com/kubeadm-ha/ingress-nginx_controller:v0.43.0 k8s.gcr.io/ingress-nginx/controller:v0.43.0</span></span><br></pre></td></tr></table></figure><h4 id="将镜像导入到-kind"><a href="#将镜像导入到-kind" class="headerlink" title="将镜像导入到 kind"></a>将镜像导入到 kind</h4><p>kind 的 <code>load</code> 命令可以帮助我们将 Docker 中的镜像导入到由 kind 创建的集群中，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kind load docker-image k8s.gcr.io/ingress-nginx/controller:v0.43.0</span></span><br><span class="line">Image: &quot;k8s.gcr.io/ingress-nginx/controller:v0.43.0&quot; with ID &quot;sha256:38dca1cbd23197f591e58fc6c949110b53f7a003e15f6d4974d86e7f7a00815d&quot; not yet present on node &quot;kind-control-plane&quot;, loading...</span><br></pre></td></tr></table></figure><h4 id="部署-Ingress-控制器"><a href="#部署-Ingress-控制器" class="headerlink" title="部署 Ingress 控制器"></a>部署 Ingress 控制器</h4><p>我们使用 Gitee 的镜像仓库地址来加速资源的下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl apply -f https://gitee.com/mirrors/ingress-nginx/raw/controller-v0.43.0/deploy/static/provider/kind/deploy.yaml</span></span><br></pre></td></tr></table></figure><p>Ingress 控制器的部署和启动需要等待一会，可以使用以下命令来查看运行情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -n ingress-nginx</span></span><br><span class="line">NAME                                        READY   STATUS      RESTARTS   AGE</span><br><span class="line">ingress-nginx-admission-create-ktp2g        0/1     Completed   0          7h4m</span><br><span class="line">ingress-nginx-admission-patch-q4vmb         0/1     Completed   2          7h4m</span><br><span class="line">ingress-nginx-controller-55bc59c885-mcp25   1/1     Running     0          7h4m</span><br></pre></td></tr></table></figure><p>如果 ingress-nginx-controller-xxx 的状态的是 Running，说明已经成功运行。</p><h3 id="部署测试应用"><a href="#部署测试应用" class="headerlink" title="部署测试应用"></a>部署测试应用</h3><p>此处我们使用 kind 官网提供的测试应用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://kind.sigs.k8s.io/examples/ingress/usage.yaml</span><br></pre></td></tr></table></figure><p>测试 Ingress 的连通性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl localhost/foo</span></span><br><span class="line">foo</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl localhost/bar</span></span><br><span class="line">bar</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://kind.sigs.k8s.io/docs/user/quick-start/">kind – Quick Start (k8s.io)</a></li><li><a href="https://kind.sigs.k8s.io/docs/user/ingress/">kind – Ingress (k8s.io)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Wine 在 macOS 上运行经典的 Windows 游戏</title>
      <link href="/2021/03/19/Play-Windows-Classic-Games-on-macOS/"/>
      <url>/2021/03/19/Play-Windows-Classic-Games-on-macOS/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>笔者作为80后，至今仍然对于青春时代曾经伴随着我们的经典游戏念念不忘。暗黑破坏神、魔兽争霸、重返德军总部。。。那毕竟是我们这一代的青春。即使我现在玩不动了，但笔记本电脑中依然保留着这些游戏，偶尔玩一下怀念怀念也好。</p><p>我的笔记本现在已经换成 MacBook Pro，运行着 macOS Catalina 操作系统，曾经的经典游戏常规的方法依然无法继续运行了。当然你可能会说，安装一个虚拟机系统，里面跑一个 Windows XP 也可以玩了。这当然可以做到，但是它太重了，而且中间隔着一个虚拟化层，运行效率自然不高。作为搞 IT 的，怎么可以止步于此？</p><p>本次介绍一种使用 Wine 运行经典游戏的方法，教程适用于 macOS 操作系统，但思路也适用于 Linux。</p><span id="more"></span><h2 id="Wine-简介"><a href="#Wine-简介" class="headerlink" title="Wine 简介"></a>Wine 简介</h2><p>来自维基百科：Wine通过提供一个<a href="https://zh.wikipedia.org/wiki/%E5%85%BC%E5%AE%B9%E5%B1%82">兼容层</a>来将Windows的系统调用转换成与POSIX标准的系统调用。它还提供了Windows系统运行库的替代品和一些系统组件的替代品。为了避免著作权问题，Wine主要使用黑箱测试逆向工程来编写。</p><p>说白了 Wine 和虚拟机的玩法有本质上的区别，Wine 是操作系统层的 API 调用转换，并没有虚拟层，因此运行效率上比虚拟机方式会高很多。</p><h2 id="macOS-下安装-Wine"><a href="#macOS-下安装-Wine" class="headerlink" title="macOS 下安装 Wine"></a>macOS 下安装 Wine</h2><p>本次我们将使用 Homebrew 来安装 Wine，Homebrew 是 macOS 下最流行的包管理器，如果您还没有安装 Homebrew，请访问 <a href="https://brew.sh/">Homebrew 官网</a>详细了解，或者直接在终端使用以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>接下来我们使用 Homebrew 来安装 Wine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> spctl --master-disable <span class="comment"># 允许未知来源的软件安装</span></span><br><span class="line">$ brew tap gcenx/wine</span><br><span class="line">$ brew cask install --no-quarantine wine-crossover</span><br></pre></td></tr></table></figure><h2 id="配置-Wine"><a href="#配置-Wine" class="headerlink" title="配置 Wine"></a>配置 Wine</h2><p>我们的目标是运行 Windows 下的经典游戏，因此此处所有的配置都是针对这个目标进行的。接下来我们开始配置 Wine 环境。</p><h3 id="初始化-Wine"><a href="#初始化-Wine" class="headerlink" title="初始化 Wine"></a>初始化 Wine</h3><p>我们准备将 Wine 的主目录存储在 <code>$HOME/.wine/</code> 下，在终端执行一下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ WINEPREFIX=<span class="variable">$HOME</span>/.wine winecfg</span><br></pre></td></tr></table></figure><p>此时 WIne 会启动一个包含若干标签页的配置窗口，我们需要设置以下内容：</p><table><thead><tr><th>标签页</th><th>属性</th><th>值</th><th>备注</th></tr></thead><tbody><tr><td>Applications</td><td>WIndows Version</td><td>Windows XP</td><td></td></tr><tr><td>Libraries</td><td>New override for library</td><td>ddraw</td><td>然后点击 <code>Add</code> 按钮添加</td></tr></tbody></table><p>配置窗口截图如下所示：</p><p><img data-src="/2021/03/19/Play-Windows-Classic-Games-on-macOS/winecfg.png" alt="winecfg"></p><p>设置完成之后，点击 <code>OK</code> 按钮保存设置，此时 Wine 的主目录 <code>$HOME/.wine</code> 的目录结构看起来是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dosdevices</span><br><span class="line">│   ├── c: -&gt; ../drive_c</span><br><span class="line">│   └── z: -&gt; /</span><br><span class="line">├── drive_c</span><br><span class="line">│   ├── Program Files</span><br><span class="line">│   ├── ProgramData</span><br><span class="line">│   ├── users</span><br><span class="line">│   └── windows</span><br><span class="line">├── system.reg</span><br><span class="line">├── user.reg</span><br><span class="line">└── userdef.reg</span><br></pre></td></tr></table></figure><p>至此，Wine 所有的安装和配置工作全部结束，接下来就是如何在 Wine 中运行经典的游戏了。</p><h3 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h3><p>在终端的 shell 配置文件中为 <code>wine64</code> 添加别名 <code>wine</code>，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> wine=<span class="string">&quot;env LC_ALL=zh_CN.UTF-8 wine64&quot;</span></span><br></pre></td></tr></table></figure><h3 id="汇总配置项"><a href="#汇总配置项" class="headerlink" title="汇总配置项"></a>汇总配置项</h3><p>将以上配置项汇总后保存在 <code>$HOME/.bashrc</code> 中，如果当前安装的 shell 是 zsh 的话，则保存在 <code>$HOME/.zshrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决报错：terminals database is inaccessible</span></span><br><span class="line"><span class="built_in">export</span> TERMINFO=/usr/share/terminfo</span><br><span class="line"><span class="comment"># 禁止在终端输出所有调试信息</span></span><br><span class="line"><span class="built_in">export</span> WINEDEBUG=-all</span><br><span class="line"><span class="comment"># Wine 主目录</span></span><br><span class="line"><span class="built_in">export</span> WINEPREFIX=~/.wine</span><br><span class="line"><span class="comment"># 解决中文乱码并创建别名</span></span><br><span class="line"><span class="built_in">alias</span> wine=<span class="string">&quot;env LC_ALL=zh_CN.UTF-8 wine64&quot;</span></span><br></pre></td></tr></table></figure><h2 id="运行经典游戏"><a href="#运行经典游戏" class="headerlink" title="运行经典游戏"></a>运行经典游戏</h2><h3 id="Diablo-II"><a href="#Diablo-II" class="headerlink" title="Diablo II"></a>Diablo II</h3><p>我们以 Diablo II 为例来进行说明，首先进入目录 <code>$HOME/.wine/drive_c</code> ，然后新建目录 <code>games</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/.wine/drive_c</span><br><span class="line">$ <span class="built_in">mkdir</span> games</span><br></pre></td></tr></table></figure><p>之后，下载免安装版的 Diablo II 游戏到 <code>$HOME/.wine/drive_c/games/Diablo II</code>，相信你可以很容易下载到的 :)</p><p>然后打开注册表，增加注册表项 <code>KEY_CURRENT_USER\Software\Blizzard Entertainment\Diablo II\VideoConfig</code> 并设置该项的类型为 REG_DWORD，值为 <code>0</code>：</p><p><img data-src="/2021/03/19/Play-Windows-Classic-Games-on-macOS/regedit.png" alt="regedit"></p><p>在终端启动 Diablo II：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> d2=<span class="string">&quot;cd <span class="variable">$HOME</span>/.wine/drive_c/games/Diablo\ II &amp;&amp; wine Game.exe -w -direct -txt&quot;</span></span><br><span class="line">$ d2</span><br></pre></td></tr></table></figure><p><img data-src="/2021/03/19/Play-Windows-Classic-Games-on-macOS/d2.png" alt="DiabloI II"></p><p>至此，Diablo II 游戏的基本设置就已经全部完成。其他的经典游戏步骤类似，笔者已经测试通过了如下经典游戏：</p><ul><li>暗黑破坏神 II</li><li>重返德军总部</li><li>魔兽争霸 III （过场动画会报错）</li></ul><h2 id="附录：终端环境配置汇总"><a href="#附录：终端环境配置汇总" class="headerlink" title="附录：终端环境配置汇总"></a>附录：终端环境配置汇总</h2><p>追加如下配置到 <code>$HOME/.zshrc</code> 或者 <code>$HOME/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fix error `terminals database is inaccessible`</span></span><br><span class="line"><span class="built_in">export</span> TERMINFO=/usr/share/terminfo</span><br><span class="line"><span class="comment"># Disable debugging message output</span></span><br><span class="line"><span class="built_in">export</span> WINEDEBUG=-all</span><br><span class="line"><span class="comment"># Set up wine home directory</span></span><br><span class="line"><span class="built_in">export</span> WINEPREFIX=~/.wine</span><br><span class="line"><span class="built_in">export</span> WINEGAMEHOME=<span class="string">&quot;<span class="variable">$WINEPREFIX</span>/drive_c/games&quot;</span></span><br><span class="line"><span class="built_in">alias</span> wine=<span class="string">&quot;env LC_ALL=zh_CN.UTF-8 wine&quot;</span></span><br><span class="line"><span class="built_in">alias</span> d2=<span class="string">&quot;cd <span class="variable">$WINEGAMEHOME</span>/Diablo\ II &amp;&amp; wine Game.exe -w -direct -txt&quot;</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/whipowill/d2-plugy-qol/blob/master/Guides/MacOSX.md">D2QOL | Mac OSX</a></li><li><a href="https://github.com/whipowill/d2-plugy-qol/blob/master/Guides/Video.md">D2QOL | Video</a></li><li><a href="https://blog.csdn.net/Y1575071736/article/details/91356917">macOS Mojave下解决wine中文乱码问题</a></li><li><a href="https://blog.csdn.net/qq_29695701/article/details/90715653">terminals database is inaccessible 解决办法 | CSDN</a></li><li><a href="https://wiki.winehq.org/Debug_Channels">Debug Channels - WineHQ Wiki</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Classic Games </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wine </tag>
            
            <tag> macOS </tag>
            
            <tag> Diablo II </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 快速入门</title>
      <link href="/2021/03/11/hexo-quickstart/"/>
      <url>/2021/03/11/hexo-quickstart/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a><a href="https://hexo.io/zh-cn/">Hexo</a> 简介</h2><p>官网一句话概括就是“快速、简洁且高效的博客框架”，笔者的博客就是使用 Hexo 来搭建的，前期虽然踩过一些坑，但总体用下来看确实很方便。Hexo 社区有丰富的博客模板库和功能插件供用户下载和扩展，接下来就把笔者使用 Hexo 搭建博客的过程介绍一下。</p><span id="more"></span><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="安装-hexo-cli"><a href="#安装-hexo-cli" class="headerlink" title="安装 hexo-cli"></a>安装 <code>hexo-cli</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g hexo-cli <span class="comment"># 安装 hexo</span></span></span><br></pre></td></tr></table></figure><h3 id="新建博客项目"><a href="#新建博客项目" class="headerlink" title="新建博客项目"></a>新建博客项目</h3><p>在一个空目录下执行 hexo 初始化命令会触发 hexo 从 GitHub 上下载 Hexo 项目骨架到当前目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> myblog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> myblog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init</span></span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">...</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><p>此时文件夹 myblog 的项目结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">myblog</span><br><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">├── themes</span><br><span class="line">└── yarn.lock</span><br><span class="line"></span><br><span class="line">4 directories, 4 files</span><br></pre></td></tr></table></figure><p>此时执行 <code>hexo server</code> 命令会在本地启动博客，访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可呈现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p><img data-src="/2021/03/11/hexo-quickstart/image-20210311114700121.png" alt="image-20210311114700121"></p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>Hexo官方提供了丰富的插件来进行功能增强，读者可以访问 <a href="https://hexo.io/plugins/">Plugins | Hexo</a> 来详细了解插件详情，这里我们准备安装以下三个插件以支持不同的功能特性，如下：</p><table><thead><tr><th>插件名称</th><th>作用</th></tr></thead><tbody><tr><td>hexo-generator-search</td><td>启用全文搜索</td></tr><tr><td>hexo-deployer-git</td><td>支持将博客发布到基于Git的网站，如 GitHub Page，Gitee Pages 等等</td></tr><tr><td>hexo-asset-link</td><td>使博客中的图片和链接可以正确显示</td></tr></tbody></table><p>在刚刚我们创建的博客主目录 myblog 下打开终端并执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-search</span><br><span class="line">npm install --save hexo-deployer-git</span><br><span class="line">npm install --save hexo-asset-link</span><br></pre></td></tr></table></figure><h3 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h3><p><code>_config.yml</code> 是 Hexo 的核心配置文件我们要进行以下改动：</p><table><thead><tr><th>属性</th><th>值</th><th>解释</th></tr></thead><tbody><tr><td>language</td><td>zh-CN</td><td>语言</td></tr><tr><td>timezone</td><td>Asia/Shanghai</td><td>时区</td></tr><tr><td>url</td><td>例如 <a href="https://myblog.com/">https://myblog.com</a></td><td>博客域名，gitee page 需改为 <a href="https://xxx.gitee.io/blog">https://xxx.gitee.io/blog</a></td></tr><tr><td>root</td><td>/</td><td>网站根目录，gitee page 需要改为 <code>/blog/</code></td></tr><tr><td>post_asset_folder</td><td>true</td><td>自动为文章生成专属的资源文件夹</td></tr><tr><td>theme</td><td>landscape</td><td>下载hexo主题包到themes目录，并更换主题名称</td></tr><tr><td>deploy/type</td><td>git</td><td></td></tr><tr><td>deploy/repository</td><td>-</td><td>根据实际情况制定Git仓库地址</td></tr><tr><td>deploy/branch</td><td>master</td><td>默认推送的分支</td></tr></tbody></table><h3 id="编写博客文章"><a href="#编写博客文章" class="headerlink" title="编写博客文章"></a>编写博客文章</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new post <span class="string">&quot;Hello world&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 markdown 编辑器编辑 <span class="built_in">source</span>/_posts/hello-world.md</span></span><br></pre></td></tr></table></figure><h3 id="推送更新"><a href="#推送更新" class="headerlink" title="推送更新"></a>推送更新</h3><p>目前已验证通过的托管页面有 GitHub Pages 和 Gitee Pages：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean    <span class="comment"># 清空之前生成内容</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo generate <span class="comment"># 生成静态页面</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo deploy   <span class="comment"># 推送更新至 Git 仓库</span></span></span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="cannot-get-categories"><a href="#cannot-get-categories" class="headerlink" title="cannot get /categories/"></a>cannot get /categories/</h3><p>默认情况下， hexo 并未自动为我们生成对应的分类和标签页面，我们可以按照如下方法依次启用分类和标签功能。</p><ol><li><p>新建一个页面，命名为 <code>categories</code> 。命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></li><li><p>编辑刚新建的页面 (source/categories/index.md)，将页面的类型设置为 <code>categories</code> ，主题将自动为这个页面显示所有分类。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li><li><p>在菜单中添加链接。编辑主题的 <code>_config.yml</code> ，将 <code>menu</code> 中的 <code>categories: /categories</code> 注释去掉，如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure></li></ol><p>启用标签功能类似，只需要把类型改为 <code>tags</code>。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://liolok.github.io/How-to-Add-Image-to-Hexo-Blog-Post/">How to Add Image to Hexo Blog Post | LIOLOG (liolok.github.io)</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2">Tags/Categories 访问 404（hexo-theme-next）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何生成 Markdown 格式的 Git 日志</title>
      <link href="/2020/12/30/git-log-to-markdown/"/>
      <url>/2020/12/30/git-log-to-markdown/</url>
      
        <content type="html"><![CDATA[<p>如今 Markdown 格式的文档在技术领域无处不在，尤其是在开源工具和技术文档方面，例如 GitHub、GitLab 等等基于 Git 的版本控制平台。一般情况下，Git 使用 <code>git-log</code> 来生成两次提交之间的变更日志信息。有时我们希望将此次版本发布的更新日志抽取出来，以 markdown 格式作为发布的版本的变更日志内容。</p><span id="more"></span><h3 id="git-log"><a href="#git-log" class="headerlink" title="git-log"></a>git-log</h3><p>以下是我们利用 git-log 命令格式化出来一段 <a href="https://github.com/eliu/kt-connect-rbac">eliu/kt-connect-rbac</a> 仓库的变更日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --no-merges --format=<span class="string">&quot;%h %ad %an %s&quot;</span> --<span class="built_in">date</span>=short HEAD</span></span><br><span class="line">da7815d 2020-09-29 eliu imp: make 6443 port by default if not specified</span><br><span class="line">73ef9aa 2020-05-05 eliu imp: update README</span><br><span class="line">6bd8192 2020-05-05 eliu fix: correct default value</span><br><span class="line">003bb7e 2020-05-05 eliu fix: execute init_config inside prerequisite</span><br><span class="line">9f1326c 2020-05-04 eliu imp: refactor all scripts into one kt-rbac.sh</span><br><span class="line">c34a405 2020-03-20 Liu Hongyu Create LICENSE</span><br><span class="line">b9e3175 2020-03-20 eliu first commit</span><br></pre></td></tr></table></figure><p>其中 <code>--no-merges</code> 表示通过 Merge 请求所产生的提交可忽略，<code>--date=short</code> 表示以简短的日期格式输出(yyyy-mm-dd)，<code>--format=&quot;xxxxx&quot;</code> 表示日志输出的格式模板，具体可输入 <code>git log --help</code> 了解详细的占位符含义。</p><h3 id="加工成-Markdown-格式"><a href="#加工成-Markdown-格式" class="headerlink" title="加工成 Markdown 格式"></a>加工成 Markdown 格式</h3><p>我们将 <code>--format</code> 选项稍加调整即可变成符合 markdown 格式的表格内容，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--format=<span class="string">&quot;| %h | %ad | %an | %s |&quot;</span></span></span><br></pre></td></tr></table></figure><p>再辅以表格的标题内容即可变成完整的 MD 格式的变更日志内容：</p><p><img data-src="/2020/12/30/git-log-to-markdown/sample.png" alt="sample"></p><h3 id="changelog-sh"><a href="#changelog-sh" class="headerlink" title="changelog.sh"></a>changelog.sh</h3><p>根据以上的思路，我这里写了一个可以在终端快速生成 Markdown 格式的变更日志的脚本 changelog.sh，使用方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">changelog.sh --<span class="built_in">help</span></span></span><br><span class="line"></span><br><span class="line">USAGE</span><br><span class="line">    changelog.sh [--since [VERSION]] [--until [VERSION]]</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">    -h | --help)      Print help</span><br><span class="line">    -v | --version)   Print version info</span><br><span class="line">    -p | --prefix)    If provided, search all sub-folders with this prefix.</span><br><span class="line">                      Otherwise process current directory.</span><br><span class="line">    -s | --since)     Commit id from</span><br><span class="line">    -u | --until)     Commit id to</span><br><span class="line"></span><br><span class="line">EXAMPLES</span><br><span class="line">    1. Generate all change logs between 1.0.1 and 1.0.2</span><br><span class="line"></span><br><span class="line">        $ changelog.sh --since 1.0.1 --until 1.0.2</span><br><span class="line"></span><br><span class="line">    2. Generate all change logs of version 1.0.2 from the very beginning</span><br><span class="line"></span><br><span class="line">        $ changelog.sh --until 1.0.2</span><br><span class="line"></span><br><span class="line">    3. Generate all change logs since version 1.0.2</span><br><span class="line"></span><br><span class="line">        $ changelog.sh --since 1.0.2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本可以为当前所在的git仓库目录生成变更日志文件，也支持将一组相似的仓库批量生成变更日志，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">changelog.sh --prefix kt --<span class="keyword">until</span> HEAD</span></span><br><span class="line">[INFO] CHANGELOG will be written to file CHANGELOG-HEAD.md</span><br><span class="line">[INFO] Appending change logs for kt-connect-rbac ...</span><br></pre></td></tr></table></figure><p>此时在脚本所在的目录中生成了一个 Markdown 格式的日志文件 <code>CHANGELOG-HEAD.md</code>, 使用 Markdown 编辑器打开该文件即可得到上面截图的效果。脚本提供了 <code>--prefix</code>, <code>--since</code> 和 <code>--until</code> 选项可以使用。</p><p>项目地址：<a href="https://github.com/eliu/git-log-markdown">eliu/git-log-markdown: Generate a markdown format change-log file for git repos. (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitBook 基本操作</title>
      <link href="/2020/08/07/gitbook-basics/"/>
      <url>/2020/08/07/gitbook-basics/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文主要的目的是介绍如何快速的在本地快速启动一个 GitBook 项目并使用浏览器进行阅读。内容比较简单，仅用作备忘，以便后面查阅。</p><span id="more"></span><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>gitbook 命令行工具基于 Node.js 平台，并且只兼容 <code>10.x</code> 版本，所以读者需要访问 <a href="https://nodejs.org/dist/latest-v10.x/">https://nodejs.org/dist/latest-v10.x/</a> 下载对应平台的 Node.js 安装文件进行安装。之后运行以下命令安装 <code>gitbook-cli</code>:</p><blockquote><p>注意： Windows 用户请打开 PowerShell 执行安装命令。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确认 Node.js 版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v</span></span><br><span class="line">v10.22.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 gitbook-cli</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g gitbook-cli</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确认 gitbook-cli 版本</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gitbook <span class="built_in">ls</span></span></span><br><span class="line">GitBook Versions Installed:</span><br><span class="line"></span><br><span class="line">    * 3.2.3</span><br><span class="line"></span><br><span class="line">Run &quot;gitbook update&quot; to update to the latest version.</span><br></pre></td></tr></table></figure><h2 id="启动-GitBook-项目"><a href="#启动-GitBook-项目" class="headerlink" title="启动 GitBook 项目"></a>启动 GitBook 项目</h2><p>请访问 <a href="https://www.npmjs.com/package/gitbook">https://www.npmjs.com/package/gitbook</a> 详细了解如何构建一个符合 GitBook 的项目。进入 gitbook 项目主目录，执行 <code>gitbook serve</code> 在本地启动服务：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gitbook serve</span></span><br><span class="line">info: 7 plugins are installed</span><br><span class="line">info: loading plugin &quot;livereload&quot;... OK</span><br><span class="line">info: loading plugin &quot;highlight&quot;... OK</span><br><span class="line">info: loading plugin &quot;search&quot;... OK</span><br><span class="line">info: loading plugin &quot;lunr&quot;... OK</span><br><span class="line">info: loading plugin &quot;sharing&quot;... OK</span><br><span class="line">info: loading plugin &quot;fontsettings&quot;... OK</span><br><span class="line">info: loading plugin &quot;theme-default&quot;... OK</span><br><span class="line">info: found 82 pages</span><br><span class="line">info: found 236 asset files</span><br><span class="line">info: &gt;&gt; generation finished with success in 14.0s !</span><br><span class="line"></span><br><span class="line">Starting server ...</span><br><span class="line">Serving book on http://localhost:4000</span><br></pre></td></tr></table></figure><p>最后根据提示访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 在浏览器查看文档。</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitbook </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S 应用启停通用脚本</title>
      <link href="/2020/05/19/k8s-apps-admin/"/>
      <url>/2020/05/19/k8s-apps-admin/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes 集群中运行的应用中的每一个服务组件通常是以 Deployment 的形式存在的，本文中提供的管理脚本假设读者部署在 Kubernetes 中的应用服务的 Deployment 对象均已特定的前缀命名，比如 demo，那么集群中可能存在一下的 Deployment 对象：</p><ul><li>demo-register</li><li>demo-gateway</li><li>demo-oauth</li><li>demo-config</li><li>demo-swagger</li><li>…</li></ul><p>在这个前提下，我这里提供了一个脚本可以对这些 deployment 对象进行一键启停操作。举例说明，加绒我的脚本名称为 <code>k8s-apps.sh</code> 那么可以执行如下命令：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动所有应用，default 为命名空间</span></span><br><span class="line">./k8s-apps.sh start default</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止所有应用</span></span><br><span class="line">./k8s-apps.sh stop default</span><br></pre></td></tr></table></figure><p>启停脚本的内容如下：</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright 2020 Liu Hongyu (eliuhy@163.com)</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">you may not use this file except <span class="keyword">in</span> compliance with the License.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You may obtain a copy of the License at</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See the License <span class="keyword">for</span> the specific language governing permissions and</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">limitations under the License.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="built_in">set</span> -e</span></span><br><span class="line"></span><br><span class="line">prefix=&quot;demo&quot;        # pattern that names of deployment start with</span><br><span class="line">GRN=&quot;\e[32m&quot;        # green color</span><br><span class="line">YLW=&quot;\e[33m&quot;        # yellow color</span><br><span class="line">RED=&quot;\e[91m&quot;        # red color</span><br><span class="line">RST=&quot;\e[39m&quot;        # reset color</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- common <span class="built_in">functions</span> definition ---</span></span><br><span class="line">info() &#123; echo -e &quot;$GRN[INFO]$RST&quot; $@</span><br><span class="line">&#125;</span><br><span class="line">warn() &#123; echo -e &quot;$YLW[WARN]$RST&quot; $@</span><br><span class="line">&#125;</span><br><span class="line">fata() &#123; echo -e &quot;$RED[FATA]$RST&quot; $@; exit 1</span><br><span class="line">&#125;</span><br><span class="line">has_command() &#123; command -v $@ &gt;/dev/null</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- <span class="built_in">print</span> <span class="built_in">help</span> ---</span></span><br><span class="line">show_help() &#123;</span><br><span class="line">echo -e &quot;</span><br><span class="line">USAGE:</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash">&#123;GRN&#125;<span class="variable">$&#123;PROG&#125;</span><span class="variable">$&#123;RST&#125;</span> <span class="variable">$&#123;YLW&#125;</span>start<span class="variable">$&#123;RST&#125;</span>|<span class="variable">$&#123;YLW&#125;</span>stop<span class="variable">$&#123;RST&#125;</span> -n|--namespace &lt;<span class="variable">$&#123;YLW&#125;</span>namespace<span class="variable">$&#123;RST&#125;</span>&gt;</span></span><br><span class="line">&quot;</span><br><span class="line">exit 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--- Check dependencies and arguments ---</span></span><br><span class="line">pre_check() &#123;</span><br><span class="line">  has_command kubectl || fata &quot;This script needs &#x27;kubectl&#x27; installed on your computer.&quot;</span><br><span class="line">  [ -n &quot;$action&quot;    ] || fata &quot;Need provide at least one action: start|stop&quot;</span><br><span class="line">  [[ $action =~ ^(start|stop)$ ]] || fata &quot;Invalid action &#x27;$action&#x27;. Use one of the following actions: start|stop&quot;</span><br><span class="line">  [ -n &quot;$namespace&quot; ] || fata &quot;Need provide namespace!&quot;</span><br><span class="line">  kubectl get ns | grep $namespace &gt;/dev/null || fata &quot;&#x27;$namespace&#x27; not found in current cluster.&quot;</span><br><span class="line">  deployments=$(kubectl get deploy -n $namespace | grep ^$prefix | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scale() &#123;</span><br><span class="line">  kubectl -n $namespace scale --current-replicas=$2 --replicas=$3 deployment/$1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scale_apps() &#123;</span><br><span class="line">  for app in $deployments; do</span><br><span class="line">    scale $app $1 $2</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  PROG=&quot;$(basename $0)&quot;</span><br><span class="line">  PARAMS=&quot;&quot;</span><br><span class="line">  while [ $# -gt 0 ]; do</span><br><span class="line">    case &quot;$1&quot; in</span><br><span class="line">      -n|--namespace)</span><br><span class="line">        namespace=$2</span><br><span class="line">        shift 2</span><br><span class="line">        ;;</span><br><span class="line">      -h|--help)</span><br><span class="line">        show_help</span><br><span class="line">        ;;</span><br><span class="line">      -*|--*)</span><br><span class="line">        fata &quot;Invalid option &#x27;$1&#x27;&quot;</span><br><span class="line">        ;;</span><br><span class="line">      *)</span><br><span class="line">        PARAMS=&quot;$1 $PARAMS&quot;</span><br><span class="line">        shift</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">  done</span><br><span class="line">  eval set -- &quot;$PARAMS&quot;</span><br><span class="line">  action=$1</span><br><span class="line"></span><br><span class="line">  pre_check</span><br><span class="line"></span><br><span class="line">  [[ $action = &quot;start&quot; ]] &amp;&amp; scale_apps 0 1 # scale up replicas from 0 to 1</span><br><span class="line">  [[ $action = &quot;stop&quot;  ]] &amp;&amp; scale_apps 1 0 # scale down replicas from 1 to 0</span><br><span class="line">  exit 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> deployment </tag>
            
            <tag> admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为域名快速生成自签名证书</title>
      <link href="/2020/05/19/self-signed-cert-for-domain/"/>
      <url>/2020/05/19/self-signed-cert-for-domain/</url>
      
        <content type="html"><![CDATA[<p>本文在文章 <a href="https://goharbor.io/docs/2.0.0/install-config/configure-https/">Configure HTTPS Access to Harbor</a> 的基础上使用 Bash 进行了简单的封装，可以为指定的域名一键生成自签名证书。例如域名 example.com 生成的自签名证书将匹配以下地址：</p><ul><li>example.com</li><li>*.example.com</li></ul><span id="more"></span><p>新建文件 <code>gencert.sh</code> ，编辑并加入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Copyright 2020 Liu Hongyu (eliuhy@163.com)</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">you may not use this file except <span class="keyword">in</span> compliance with the License.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You may obtain a copy of the License at</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See the License <span class="keyword">for</span> the specific language governing permissions and</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">limitations under the License.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="built_in">set</span> -e</span></span><br><span class="line"></span><br><span class="line">DOMAIN=&quot;$1&quot;</span><br><span class="line">WORK_DIR=&quot;$(mktemp -d)&quot;</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$DOMAIN&quot; ]; then</span><br><span class="line">  echo &quot;Domain name needed.&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;Temporary working dir is $WORK_DIR &quot;</span><br><span class="line">echo &quot;Gernerating cert for $DOMAIN ...&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Fix the following error:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cannot write random bytes:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">139695180550592:error:24070079:random number generator:RAND_write_file:Cannot open file:../crypto/rand/randfile.c:213:Filename=/home/eliu/.rnd</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">[ -f <span class="variable">$HOME</span>/.rnd ] || <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/urandom of=<span class="variable">$HOME</span>/.rnd bs=256 count=1</span></span><br><span class="line"></span><br><span class="line">openssl genrsa -out $WORK_DIR/ca.key 4096</span><br><span class="line"></span><br><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650 \</span><br><span class="line">  -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=$DOMAIN&quot; \</span><br><span class="line">  -key $WORK_DIR/ca.key \</span><br><span class="line">  -out $WORK_DIR/ca.crt</span><br><span class="line"></span><br><span class="line">openssl genrsa -out $WORK_DIR/server.key 4096</span><br><span class="line"></span><br><span class="line">openssl req -sha512 -new \</span><br><span class="line">  -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=$DOMAIN&quot; \</span><br><span class="line">  -key $WORK_DIR/server.key \</span><br><span class="line">  -out $WORK_DIR/server.csr</span><br><span class="line"></span><br><span class="line">cat &gt; $WORK_DIR/v3.ext &lt;&lt;-EOF</span><br><span class="line">authorityKeyIdentifier=keyid,issuer</span><br><span class="line">basicConstraints=CA:FALSE</span><br><span class="line">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="line">extendedKeyUsage = serverAuth</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1=$DOMAIN</span><br><span class="line">DNS.2=*.$DOMAIN</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">openssl x509 -req -sha512 -days 3650 \</span><br><span class="line">  -extfile $WORK_DIR/v3.ext \</span><br><span class="line">  -CA $WORK_DIR/ca.crt -CAkey $WORK_DIR/ca.key -CAcreateserial \</span><br><span class="line">  -in $WORK_DIR/server.csr \</span><br><span class="line">  -out $WORK_DIR/server.crt</span><br><span class="line"></span><br><span class="line">openssl x509 -inform PEM -in $WORK_DIR/server.crt -out $WORK_DIR/$DOMAIN.cert</span><br><span class="line"></span><br><span class="line">mkdir -p ./$DOMAIN</span><br><span class="line">cp $WORK_DIR/server.key $WORK_DIR/server.crt ./$DOMAIN</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设我们要为 example.com 生成证书，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gencert.sh example.com</span><br></pre></td></tr></table></figure><p>生成的后的目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── example.com</span><br><span class="line">│   ├── server.crt</span><br><span class="line">│   └── server.key</span><br><span class="line">└── gencert.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> self-signed certificate </tag>
            
            <tag> 自签名证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 kubectl 管理 kubeconfig 配置文件</title>
      <link href="/2020/03/28/manage-kubeconfig/"/>
      <url>/2020/03/28/manage-kubeconfig/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Kubernetes 集群在服务器搭建部署成功之后，通常我们都会通过 <code>kubectl</code> 命令行工具与集群互动、发送操作指令来管理集群。<code>kubectl</code> 主要依赖于集群配置文件 <code>kubeconfig</code> 与集群进行通讯，这个文件通常在 Kubernetes 集群的 master 节点服务器的 <code>$HOME/.kube/config</code> 目录下。开发者可以从服务器获取改配置文件到开发者本地电脑上的相同目录位置上即可。</p><p>本篇文章主要介绍一下我们如何管理这个配置文件。如果熟悉 <code>kubeconfig</code> 文件的结构，读者当然可以使用文本编辑器自行修改，不过手工修改难免会有错误和不便。所以这里介绍一下如何利用 <code>kubectl</code> 工具来帮助我们管理和调整配置文件。</p><span id="more"></span><h2 id="kubeconfig-的结构"><a href="#kubeconfig-的结构" class="headerlink" title="kubeconfig 的结构"></a>kubeconfig 的结构</h2><p>kubeconfig 是一个 Kubernetes 中的一个资源对象，叫做 <code>Config</code> , 内容格式是 YAML 。这个文件中主要包含了集群（clusters）、上下文（contexts）和用户（users）信息，他们的层次结构和关系如下图所示：</p><p><img data-src="/2020/03/28/manage-kubeconfig/kubeconfig-structure.png" alt="kubeconfig 结构关系图"></p><p>如图所示，上下文 context 是建立集群、用户和命名空间之间关系的桥梁和纽带，我们在本地切换所谓的“环境”其实就是将一个指定的上下文为当前激活的上下文（current-context）。再通俗点讲，这个上下文指的就是你当前是以什么身份（user) 在连接哪个集群（cluster），连接后自动切换到哪一个命名空间（namespace）下。</p><h2 id="kubectl-config"><a href="#kubectl-config" class="headerlink" title="kubectl config"></a>kubectl config</h2><p><code>kubectl</code> 中的 <code>config</code> 子命令可以帮助我们维护存储在本地的配置文件，我们先来看下它的帮助说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config --<span class="built_in">help</span></span></span><br><span class="line">Modify kubeconfig files using subcommands like &quot;kubectl config set current-context my-context&quot;</span><br><span class="line"></span><br><span class="line"> The loading order follows these rules:</span><br><span class="line"></span><br><span class="line">  1.  If the --kubeconfig flag is set, then only that file is loaded. The flag may only be set once and no merging takes</span><br><span class="line">place.</span><br><span class="line">  2.  If $KUBECONFIG environment variable is set, then it is used as a list of paths (normal path delimiting rules for</span><br><span class="line">your system). These paths are merged. When a value is modified, it is modified in the file that defines the stanza. When</span><br><span class="line">a value is created, it is created in the first file that exists. If no files in the chain exist, then it creates the</span><br><span class="line">last file in the list.</span><br><span class="line">  3.  Otherwise, $&#123;HOME&#125;/.kube/config is used and no merging takes place.</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  current-context Displays the current-context</span><br><span class="line">  delete-cluster  Delete the specified cluster from the kubeconfig</span><br><span class="line">  delete-context  Delete the specified context from the kubeconfig</span><br><span class="line">  get-clusters    Display clusters defined in the kubeconfig</span><br><span class="line">  get-contexts    Describe one or many contexts</span><br><span class="line">  rename-context  Renames a context from the kubeconfig file.</span><br><span class="line">  set             Sets an individual value in a kubeconfig file</span><br><span class="line">  set-cluster     Sets a cluster entry in kubeconfig</span><br><span class="line">  set-context     Sets a context entry in kubeconfig</span><br><span class="line">  set-credentials Sets a user entry in kubeconfig</span><br><span class="line">  unset           Unsets an individual value in a kubeconfig file</span><br><span class="line">  use-context     Sets the current-context in a kubeconfig file</span><br><span class="line">  view            Display merged kubeconfig settings or a specified kubeconfig file</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  kubectl config SUBCOMMAND [options]</span><br><span class="line"></span><br><span class="line">Use &quot;kubectl &lt;command&gt; --help&quot; for more information about a given command.</span><br><span class="line">Use &quot;kubectl options&quot; for a list of global command-line options (applies to all commands).</span><br></pre></td></tr></table></figure><p>这里简要说明一下config下几个主要的子命令：</p><table><thead><tr><th>子命令</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>current-context</code></td><td>显示当前的上下文名称</td><td></td></tr><tr><td><code>use-context</code></td><td>指定某个上下文为当前激活的上下文</td><td></td></tr><tr><td><code>rename-context</code></td><td>重命名一个上下文</td><td></td></tr><tr><td><code>delete-context</code></td><td>从 kubeconfig 中删除指定的上下文</td><td></td></tr><tr><td><code>delete-cluster</code></td><td>从 kubeconfig 中删除指定的集群</td><td></td></tr><tr><td><code>set</code></td><td>设置 kubeconfig 中一个具体的属性的值</td><td></td></tr><tr><td><code>set-cluster</code></td><td>设置指定集群的属性</td><td></td></tr><tr><td><code>set-context</code></td><td>设置指定上下文的属性</td><td></td></tr><tr><td><code>set-credentials</code></td><td>设置指定用户的属性</td><td>无法删除</td></tr><tr><td><code>unset</code></td><td>删除 kubeconfig 中一个具体的属性的值</td><td>可用于删除</td></tr><tr><td><code>view</code></td><td>输出合并后的kubeconfig的内容，格式为 YAML，密文内容不会显示</td><td></td></tr><tr><td><code>get-clusters</code></td><td>输出所有的集群信息</td><td></td></tr><tr><td><code>get-contexts</code></td><td>输出所有的上下文信息，同时会标记哪一个是当前的上下文</td><td></td></tr></tbody></table><h2 id="常见任务场景"><a href="#常见任务场景" class="headerlink" title="常见任务场景"></a>常见任务场景</h2><p>接下来我们列举一些常见的任务场景。</p><h3 id="0x01-查看当前所有的集群"><a href="#0x01-查看当前所有的集群" class="headerlink" title="0x01 查看当前所有的集群"></a>0x01 查看当前所有的集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config get-clusters</span></span><br><span class="line">NAME</span><br><span class="line">kubernetes</span><br></pre></td></tr></table></figure><h3 id="0x02-修改集群服务器地址"><a href="#0x02-修改集群服务器地址" class="headerlink" title="0x02 修改集群服务器地址"></a>0x02 修改集群服务器地址</h3><p>首先我们使用以下命令来看下集群 kubernetes 的 server 属性的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config view -o jsonpath=<span class="string">&#x27;&#123;.clusters[?(@.name == &quot;kubernetes&quot;)].cluster.server&#125;&#x27;</span></span></span><br><span class="line">http://127.0.0.1:8443</span><br></pre></td></tr></table></figure><p>接下来我们是用 <code>set-cluster</code> 子命令来修改服务器的地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改集群服务器地址为 https://192.168.1.10:8443</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config set-cluster kubernetes --server=https://192.168.1.10:8443</span></span><br><span class="line">Cluster &quot;kubernetes&quot; set.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次查看集群的服务器地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config view -o jsonpath=<span class="string">&#x27;&#123;.clusters[?(@.name == &quot;kubernetes&quot;)].cluster.server&#125;&#x27;</span></span></span><br><span class="line">https://192.168.1.10:8443</span><br></pre></td></tr></table></figure><h3 id="0x03-删除一个集群"><a href="#0x03-删除一个集群" class="headerlink" title="0x03 删除一个集群"></a>0x03 删除一个集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除集群 docker-desktop</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config delete-cluster docker-desktop</span></span><br><span class="line">deleted cluster docker-desktop from /Users/eliuhy/.kube/config</span><br></pre></td></tr></table></figure><h3 id="0x04-删除一个用户"><a href="#0x04-删除一个用户" class="headerlink" title="0x04 删除一个用户"></a>0x04 删除一个用户</h3><p><code>kubectl config</code> 未直接提供的删除用户的子命令，所以我们找不到类似于 <code>delete-user</code> 之类的选项。不过我们可以使用 <code>unset</code> 子命令来完成这个任务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除用户 docker-desktop</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config <span class="built_in">unset</span> users.docker-desktop</span></span><br><span class="line">Property &quot;users.docker-desktop&quot; unset.</span><br></pre></td></tr></table></figure><h3 id="0x05-查看当前所有的上下文"><a href="#0x05-查看当前所有的上下文" class="headerlink" title="0x05 查看当前所有的上下文"></a>0x05 查看当前所有的上下文</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config get-contexts</span></span><br><span class="line">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class="line">*         kt-connect@kubernetes         kubernetes   kt-connect         default</span><br><span class="line">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br></pre></td></tr></table></figure><h3 id="0x06-删除上下文信息"><a href="#0x06-删除上下文信息" class="headerlink" title="0x06 删除上下文信息"></a>0x06 删除上下文信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除上下文 docker-desktop</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config delete-context docker-desktop</span></span><br><span class="line">deleted context docker-desktop from /Users/eliuhy/.kube/config</span><br></pre></td></tr></table></figure><h3 id="0x07-更新上下文的命名空间"><a href="#0x07-更新上下文的命名空间" class="headerlink" title="0x07 更新上下文的命名空间"></a>0x07 更新上下文的命名空间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看上下文 kubernetes-admin@kubernetes 的详细信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config get-contexts kubernetes-admin@kubernetes</span></span><br><span class="line">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class="line">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   default</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改上下文的命名空间为 kube-system</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config set-context kubernetes-admin@kubernetes --namespace=kube-system</span></span><br><span class="line">Context &quot;kubernetes-admin@kubernetes&quot; modified.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次查看上下文信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config get-contexts kubernetes-admin@kubernetes</span></span><br><span class="line">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class="line">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br></pre></td></tr></table></figure><h3 id="0x08-修改当前激活的上下文"><a href="#0x08-修改当前激活的上下文" class="headerlink" title="0x08 修改当前激活的上下文"></a>0x08 修改当前激活的上下文</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前激活的上下文，CURRENT 列标记星号的为当前激活的上下文</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config get-contexts</span></span><br><span class="line">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class="line">*         kt-connect@kubernetes         kubernetes   kt-connect         default</span><br><span class="line">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改当前激活的上下文为 kubernetes-admin@kubernetes</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config use-context kubernetes-admin@kubernetes</span></span><br><span class="line">Switched to context &quot;kubernetes-admin@kubernetes&quot;.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次确认是否激活成功</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config get-contexts</span></span><br><span class="line">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class="line">          kt-connect@kubernetes         kubernetes   kt-connect         default</span><br><span class="line">*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>建议大家使用 <code>kubectl config</code> 的方式来配置 <code>kubeconfig</code> 文件，避免了手工修改的麻烦和误配置之外，对于自动化管理也可以更加规范和统一。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> K8S </tag>
            
            <tag> kubeconfig </tag>
            
            <tag> kubectl config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm2 结合 Oh My Zsh 的主题配置实践</title>
      <link href="/2020/03/22/iterm2-omz-style-guide/"/>
      <url>/2020/03/22/iterm2-omz-style-guide/</url>
      
        <content type="html"><![CDATA[<h2 id="预期效果"><a href="#预期效果" class="headerlink" title="预期效果"></a>预期效果</h2><p>本文将介绍结合 <code>iTerm2</code> 和 <code>Oh My Zsh</code> 来美化 macOS 下的显示效果，先放一张最终效果图：</p><p><img data-src="/2020/03/22/iterm2-omz-style-guide/image-20200322200414320.png" alt="image-20200322200414320"></p><p>接下来我们来看下针对 iTerms2 终端进行美化的具体步骤。</p><span id="more"></span><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="0x00-下载软件"><a href="#0x00-下载软件" class="headerlink" title="0x00 下载软件"></a>0x00 下载软件</h3><ul><li>iTerm2: <a href="https://iterm2.com/downloads.html">https://iterm2.com/downloads.html</a></li><li>Oh My Zsh (OMZ): <a href="https://ohmyz.sh/">https://ohmyz.sh/</a></li></ul><h4 id="安装-OMZ"><a href="#安装-OMZ" class="headerlink" title="安装 OMZ"></a>安装 OMZ</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="0x01-安装-OMZ-插件"><a href="#0x01-安装-OMZ-插件" class="headerlink" title="0x01 安装 OMZ 插件"></a>0x01 安装 OMZ 插件</h3><h4 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 OMZ 插件 zsh-syntax-highlighting</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 OMZ 插件 zsh-autosuggestions</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><h4 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h4><p>打开 <code>$HOME/.zshrc</code> 加入以下脚本内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  autojump</span><br><span class="line">  osx</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="0x02-安装-Nerd-Fonts"><a href="#0x02-安装-Nerd-Fonts" class="headerlink" title="0x02 安装 Nerd Fonts"></a>0x02 安装 Nerd Fonts</h3><p>整个 Nerd Font 仓库将近 1G 大小，其中 99% 部分都是我们不需要的，因此我们没必要将整个仓库克隆至本地。我这里推荐使用的字体是 Adobe 的 <code>Source Code Pro</code> 和 微软公司的 <code>Cascadia Code</code>。为支持更丰富的显示，Nerd Font 提供了这两个字体的补丁字体（Patched Font），下载地址如下：</p><ul><li><a href="https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/SourceCodePro/Regular/complete/Sauce%20Code%20Pro%20Nerd%20Font%20Complete.ttf">Sauce Code Pro Nerd Font</a></li><li><a href="https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/CascadiaCode/complete/Caskaydia%20Cove%20Regular%20Nerd%20Font%20Complete.ttf">Caskaydia Cove Regular Nerd Font</a></li></ul><h3 id="0x03-配置-iTerm2"><a href="#0x03-配置-iTerm2" class="headerlink" title="0x03 配置 iTerm2"></a>0x03 配置 iTerm2</h3><p><code>⌘</code>+<code>,</code> 打开 iTerm2 的设置界面，选择你当前的配置文件，这里推荐使用 <code>Socialized Dark</code>，之后按照如图所示选择正确的补丁字体，并勾选必要的勾选项：</p><p><img data-src="/2020/03/22/iterm2-omz-style-guide/image-20200322231555092.png" alt="image-20200322231555092"></p><h3 id="0x04-安装和配置-powerlevel9k-主题"><a href="#0x04-安装和配置-powerlevel9k-主题" class="headerlink" title="0x04 安装和配置 powerlevel9k 主题"></a>0x04 安装和配置 powerlevel9k 主题</h3><p>我们根据<a href="https://github.com/Powerlevel9k/powerlevel9k/wiki/Install-Instructions#option-2-install-for-oh-my-zsh">官方指引</a>来为 OMZ 安装 powerlevel9k 主题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span></span><br></pre></td></tr></table></figure><p>编辑 <code>$HOME/.zshrc</code> 文件，并加入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POWERLEVEL9K_MODE=&#x27;nerdfont-complete&#x27;</span><br><span class="line">POWERLEVEL9K_PROMPT_ON_NEWLINE=true</span><br><span class="line">POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=&quot;╰▸ &quot;</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs)</span><br><span class="line">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br></pre></td></tr></table></figure><p>具体的参数解释可参见 powerlevel9k 的 <a href="https://github.com/Powerlevel9k/powerlevel9k/wiki/Stylizing-Your-Prompt">Wiki</a>，最后就会得到文章开头的“预期效果”！</p>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iterm2 </tag>
            
            <tag> on-my-zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 下 node-gyp rebuild failed 的解决方法</title>
      <link href="/2020/02/27/node-gyp-rebuild-failed-on-catalina/"/>
      <url>/2020/02/27/node-gyp-rebuild-failed-on-catalina/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-环境信息"><a href="#0x00-环境信息" class="headerlink" title="0x00 环境信息"></a>0x00 环境信息</h2><p>在 macOS Catalina 操作系统下（多数是从 High Sierra 升级过来的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sw_vers</span><br><span class="line">ProductName:Mac OS X</span><br><span class="line">ProductVersion:10.15.3</span><br><span class="line">BuildVersion:19D76</span><br><span class="line">$ node -v</span><br><span class="line">v13.8.0</span><br><span class="line">$ npm -v</span><br><span class="line">6.13.7</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="0x01-现象和错误信息"><a href="#0x01-现象和错误信息" class="headerlink" title="0x01 现象和错误信息"></a>0x01 现象和错误信息</h2><p>执行 <code>npm install -g xxxx</code> 或者 <code>yarn</code> 命令的时候出现如下面类似的报错信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; fsevents@1.2.11 install /usr/local/lib/node_modules/hzero-cli/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/fsevents</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.CLTools_Executables&#x27; found at &#x27;/&#x27;.</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.DeveloperToolsCLILeo&#x27; found at &#x27;/&#x27;.</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.DeveloperToolsCLI&#x27; found at &#x27;/&#x27;.</span><br><span class="line"></span><br><span class="line">gyp: No Xcode or CLT version detected!</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: `gyp` failed with exit code: 1</span><br><span class="line">gyp ERR! stack     at ChildProcess.onCpExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:351:16)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:321:20)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)</span><br><span class="line">gyp ERR! System Darwin 19.3.0</span><br><span class="line">gyp ERR! command &quot;/usr/local/Cellar/node/13.8.0/bin/node&quot; &quot;/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;</span><br><span class="line">gyp ERR! cwd /usr/local/lib/node_modules/hzero-cli/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/fsevents</span><br><span class="line">gyp ERR! node -v v13.8.0</span><br><span class="line">gyp ERR! node-gyp -v v5.0.7</span><br><span class="line">gyp ERR! not ok</span><br></pre></td></tr></table></figure><h2 id="0x02-分析和解决办法"><a href="#0x02-分析和解决办法" class="headerlink" title="0x02 分析和解决办法"></a>0x02 分析和解决办法</h2><p>以上错误大概率是 <code>Xcode Command Line Tools</code> 没有安装或者升级到 <code>macOS Catalina</code> 之后 <code>Xcode Command Line Tools</code> 安装异常所致。 所以接下来我们来检查一下这个命令行工具的安装情况。</p><h3 id="检查-Xcode-命令行工具"><a href="#检查-Xcode-命令行工具" class="headerlink" title="检查 Xcode 命令行工具"></a>检查 Xcode 命令行工具</h3><p>首先，运行以下命令检查命令行工具是否已安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>若返回以下信息，说明已经安装，否则会提示你继续完成这个命令行工具的安装过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates</span><br></pre></td></tr></table></figure><p>接下来，运行以下命令来确认已安装的命令行工具是否正常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/pkgutil --packages | grep CL</span><br></pre></td></tr></table></figure><p>若返回以下信息，则说明以满足 <code>node-gyp</code> 的要求，如果<code>没有返回任何信息</code>，则可判断 Xcode 命令行工具出现了异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.apple.pkg.CLTools_Executables</span><br><span class="line">com.apple.pkg.CLTools_SDK_macOS1015</span><br><span class="line">com.apple.pkg.CLTools_SDK_macOS1014</span><br><span class="line">com.apple.pkg.CLTools_macOS_SDK</span><br></pre></td></tr></table></figure><h3 id="修复-Xcode-命令行工具"><a href="#修复-Xcode-命令行工具" class="headerlink" title="修复 Xcode 命令行工具"></a>修复 Xcode 命令行工具</h3><p>若以上检查步骤出现异常情况，则尝试以下步骤重新安装 Xcode 命令行工具，之后重复执行检查的步骤确认有信息返回。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf $(xcode-select -print-path)</span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>最后重新执行你的 npm 或者 yarn 命令，理论上就可以恢复正常了，如果以上步骤仍无法解决你的问题，请直接打开 <a href="https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md">https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md</a> 文档详细阅读 <code>node-gyp</code> 的作者所介绍的诊断方法。</p><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><ul><li><a href="https://github.com/nodejs/node-gyp#on-macos">https://github.com/nodejs/node-gyp#on-macos</a></li><li><a href="https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md">https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> macOS Catalina </tag>
            
            <tag> node-gyp rebuild </tag>
            
            <tag> No Xcode or CLT version detected </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAP SSL 邮件账户设置</title>
      <link href="/2018/10/17/hap-email-account-ssl-setup/"/>
      <url>/2018/10/17/hap-email-account-ssl-setup/</url>
      
        <content type="html"><![CDATA[<p>HAP 默认提供一套完整的邮件发送 API 和若干邮件设置功能，其中就包括邮件账户设置功能。这个功能允许你在HAP 中配置多个邮件账户，每个邮件账户可于一个或多个邮件模板进行绑定，我们按需进行配置即可。</p><blockquote><p>更多关于邮件功能的信息请访问：</p><p><a href="http://eco.hand-china.com/doc/hap/latest/user_guide/system/email.html">http://eco.hand-china.com/doc/hap/latest/user_guide/system/email.html</a></p></blockquote><p>这里重点说一下如何配置一个启用 SSL 的邮件账户。通常情况下，它的配置端口为 <code>465</code>，同时还需要进行额外的服务器属性配置，这个配置界面在邮件账户编辑页面下方的 Server Config 或服务器设置标签页中，如下图所示：</p><span id="more"></span><p><img data-src="/2018/10/17/hap-email-account-ssl-setup/image-20181017162319708.png" alt="image-20181017162319708"></p><p>此处有以下几个固定的属性需要设置，详见下表：</p><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>mail.smtp.auth</td><td>true</td></tr><tr><td>mail.smtp.port</td><td>465</td></tr><tr><td>mail.smtp.ssl.enable</td><td>true</td></tr><tr><td>mail.smtp.socketFactory.class</td><td>javax.net.ssl.SSLSocketFactory</td></tr><tr><td>mail.smtp.socketFactory.fallback</td><td>false</td></tr><tr><td>mail.smtp.socketFactory.port</td><td>465</td></tr></tbody></table><p>属性设置完成之后，其他设置按照正常步骤完成即可。</p><blockquote><p><strong>注意：</strong>目前 Yahoo! 邮箱未能通过测试，如有进一步修复，我会同步在此处进行更新。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HAP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> email </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在非页面入口处理多语言环境</title>
      <link href="/2018/10/15/hap-i18n-irequest/"/>
      <url>/2018/10/15/hap-i18n-irequest/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 HAP 中，从浏览器打开的页面或者调用的 Rest API 都必须经过控制器层，而控制器层可以很容易地获取 <code>HttpServletRequest</code> 对象，进而构造 <code>IRequest</code> 对象来存储环境上下文信息，这里就包括当前的语言环境。</p><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ResponseData <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">IRequest</span> <span class="variable">iRequest</span> <span class="operator">=</span> <span class="built_in">this</span>.createRequestContext(request);</span><br><span class="line">    <span class="comment">// 调用服务层方法并传入 IRequest 进行业务处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseData</span>(service.someMethod(iRequest));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此在控制器层获取当前设置的语言环境是轻而易举的事情。不过，HAP 开发过程中会有很多其他的场景不会将控制器作为入口进入。在<code>任务管理</code>、<code>定时任务</code>、<code>工作流</code>和<code>UReport2报表</code>中，核心程序的入口都是通过向 Spring 注册一些通用的服务组件(<code>@Component</code>) 并实现特定的接口来实现的。因此这种场景下，如何构建一个正确的 IRequest 对象就成为一个很有技巧性的问题了。</p><span id="more"></span><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><p>构造一个 IRequest 对象的通用方法一般是通过 RequestHelper 帮助类进行辅助完成的。同时，我们要根据不同场景来获取当前环境的语言代码。然后将构建好的 IRequest 通过参数形式传递到 Service 层的方法。</p><blockquote><p><strong>注意：</strong> HAP 框架的最佳实践要求我们一定要将 IRequest 经由 Service 层调用才可以，因为框架内部已经为 Service 层增加了 AOP 处理，在调用前后会自动判断 Service 方法是否存在 IRequest 类型的参数。如果有，那么会对其自动进行管理。</p></blockquote><h3 id="RequestHelper"><a href="#RequestHelper" class="headerlink" title="RequestHelper"></a>RequestHelper</h3><p>HAP 框架内部提供了一个帮助类 RequestHelper 来辅助开发者获取当前设置的 IRequest 实例或者新建一个全新的 IRequest。该类定义在 <code>com.hand.hap.core.impl</code>包下，下表列出常见的方法：</p><table><thead><tr><th>方法名称</th><th>解释</th></tr></thead><tbody><tr><td>createServiceRequest</td><td>根据 HttpServletRequest 构建 IRequest</td></tr><tr><td>newEmptyRequest</td><td>创建一个全新的 IRequest 实例</td></tr><tr><td>clearCurrentRequest</td><td>从 ThreadLocal 中清除当前的 IRequest 实例</td></tr><tr><td>setCurrentRequest</td><td>将一个 IRequest 对象设置为当前的生效</td></tr><tr><td>getCurrentRequest</td><td>获取当前上下文的 IRequest 对象</td></tr></tbody></table><blockquote><p><strong>注意：</strong><code>getCurrentRequest</code> 的唯一的 bool 类型参数 <code>returnEmptyForNull</code>的含义为，若从当前上下文中无法获取有效的 IRequest 对象时：</p><p><code>true</code>: 调用 <code>newEmptyRequest</code> 创建一个新的请求对象</p><p><code>false</code>:  直接返回给调用者 <strong>null</strong></p></blockquote><p>接下来我们利用 RequestHelper 类来处理不同的应用场景下的多语言需求。</p><h3 id="en-US-vs-en-GB"><a href="#en-US-vs-en-GB" class="headerlink" title="en_US vs en_GB"></a>en_US vs en_GB</h3><p>当系统无法从上下文（ThreadLocal&lt;IRequest&gt;）获取 IRequest 实例时，通常我们会使用 newEmptyRequest 来新建一个空的 IRequest 对象。该方法会使用 ServiceRequest 类实例化 IRequest 对象，而此时 locale 属性则是使用 <code>Locale.getDefault().toString()</code> 方法来初始化默认值的。这在开发者本机一般是没有问题，然而在服务器运行时，它会返回服务器默认的语言代码 <strong>en_US</strong>，而不是 HAP 的 en_GB 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceRequest</span> <span class="keyword">implements</span> <span class="title class_">IRequest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">locale</span> <span class="operator">=</span> Locale.getDefault().toString();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个现象通常会在定时任务或者 Rest API 等等场景下，在服务层无法正确查询到多语言记录。接下来我们针对不同的应用场景来分别讨论解决方法。</p><h2 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h2><p>对于任务管理，我们可以通过 <code>RequestHelper.getCurrentRequest</code> 来得到当前的 IRequest 实例。但在 Linux 服务器下，它的 locale 属性并不是 <code>en_GB</code>，而是 <code>en_US</code>，这与 HAP 的语言代码不一致，导致无法正确获取多语言记录。</p><p>因此任务管理场景下的实现思路是根据任务的提交者找到对应的系统用户ID，进而找到这个用户在首选项中的语言设置，之后替换 IRequest 的 locale 属性，最后传入 Service 层。实现代码大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hand.hap.account.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.hand.hap.core.IRequest;</span><br><span class="line"><span class="keyword">import</span> com.hand.hap.core.impl.RequestHelper;</span><br><span class="line"><span class="keyword">import</span> com.hand.hap.system.dto.SysPreferences;</span><br><span class="line"><span class="keyword">import</span> com.hand.hap.system.service.ISysPreferencesService;</span><br><span class="line"><span class="keyword">import</span> com.hand.hap.task.info.ExecutionInfo;</span><br><span class="line"><span class="keyword">import</span> com.hand.hap.task.service.ITask;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> com.hand.hap.account.dto.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo.service.IDemoService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTask</span> <span class="keyword">implements</span> <span class="title class_">ITask</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ISysPreferencesService preferencesService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(ExecutionInfo executionInfo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取当前任务的提交者</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">executioner</span> <span class="operator">=</span> userService.selectByUserName(executionInfo.getUsername());</span><br><span class="line">        <span class="comment">// 根据提交者的用户ID得到用户首选项中设置的语言代码</span></span><br><span class="line">        <span class="type">SysPreferences</span> <span class="variable">preference</span> <span class="operator">=</span> preferencesService.selectUserPreference(<span class="string">&quot;locale&quot;</span>, executioner.getUserId());</span><br><span class="line">        <span class="comment">// 得到当前的 IRequest</span></span><br><span class="line">        <span class="type">IRequest</span> <span class="variable">request</span> <span class="operator">=</span> RequestHelper.getCurrentRequest(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 设置IRequest的语言上下文</span></span><br><span class="line">        request.setLocale(preference.getPreferencesValue());</span><br><span class="line">        <span class="comment">// 将IRequest传入Service层的方法</span></span><br><span class="line">        <span class="comment">// Service的AOP机制将会自动处理IRequest的生命周期</span></span><br><span class="line">        demoService.serviceMethod(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>工作流场景下的实现思路是获取当前工作流的提交者（Initiator），进而定位至该员工的系统用户，最后获取首选项的语言代码构建 IRequest。实现代码大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityDemoBean</span> <span class="keyword">implements</span> <span class="title class_">IActivitiBean</span>, JavaDelegate &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ISysPreferencesService preferencesService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution execution)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">initiator</span> <span class="operator">=</span> execution.getVariable(<span class="string">&quot;initiator&quot;</span>, String.class);</span><br><span class="line">        List&lt;User&gt; users = userService.selectUserNameByEmployeeCode(initiator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isNotEmpty(users)) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> users.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">SysPreferences</span> <span class="variable">preference</span> <span class="operator">=</span> </span><br><span class="line">                preferencesService.selectUserPreference(<span class="string">&quot;locale&quot;</span>, user.getUserId());</span><br><span class="line">            <span class="comment">// 新建IRequest</span></span><br><span class="line">            <span class="type">IRequest</span> <span class="variable">request</span> <span class="operator">=</span> RequestHelper.getCurrentRequest(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 设置IRequest的语言上下文</span></span><br><span class="line">            request.setLocale(preference.getPreferencesValue());</span><br><span class="line">            <span class="comment">// 将IRequest传入Service层的方法</span></span><br><span class="line">            <span class="comment">// Service的AOP机制将会自动处理IRequest的生命周期</span></span><br><span class="line">            demoService.serviceMethod(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UReport2-Beans"><a href="#UReport2-Beans" class="headerlink" title="UReport2 Beans"></a>UReport2 Beans</h2><p>UReport2 本身提供了一个方法叫 RequestHolder 可以用来获取当前的 IRequest，我们可以借助这个方法来达到目的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UreportDataSourceBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Demo&gt; <span class="title function_">loadDemoData</span><span class="params">(String dsName, </span></span><br><span class="line"><span class="params">                                   String datasetName, </span></span><br><span class="line"><span class="params">                                   Map&lt;String, Object&gt; parameters)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化请求上下文</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> RequestHolder.getRequest();</span><br><span class="line">        <span class="type">IRequest</span> <span class="variable">requestContext</span> <span class="operator">=</span> RequestHelper.createServiceRequest(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;Demo&gt; result = demoService.method(requestContext);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>定时任务由于其后台自动调度的特点，导致其上下文无法获取用户信息。所以针对定时任务，我们需要定义一个系统配置项来预设置一个默认的语言代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ora2062DemoJob</span> <span class="keyword">extends</span> <span class="title class_">AbstractJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IOra2062DemoService demoService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IProfileService profileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">safeExecute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 新建一个空的 IRequest</span></span><br><span class="line">        <span class="type">IRequest</span> <span class="variable">request</span> <span class="operator">=</span> RequestHelper.getCurrentRequest(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 从系统配置项 SYSTEM_LANG 中获取默认的语言代码</span></span><br><span class="line">        request.setLocale(profileService.getProfileValue(request, <span class="string">&quot;SYSTEM_LANG&quot;</span>));</span><br><span class="line">        <span class="comment">// 调用服务方法</span></span><br><span class="line">        demoService.method(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>SYSTEM_LANG 是一个全局系统配置项，可设置默认值为 en_GB</p></blockquote><h2 id="Rest-API-Controller"><a href="#Rest-API-Controller" class="headerlink" title="Rest API Controller"></a>Rest API Controller</h2><p>HAP 通过在控制器层映射特定前缀的路径来向外部提供 Rest API 服务。一般情况下，Rest API 会结合 OAuth2 进行客户端授权管理来完成身份的验证。当我们采用用户名密码方式进行授权的时候，客户端账户会与这个系统用户进行关联和初始化，所以在控制器层创建 IRequest 的时候是可以正确取到上下文信息的。</p><p>不过这种方式有个弊端是系统用户信息会暴露给外界。在某些场景下，这是不太安全的做法，这时我们通常会改用 <code>client_credentials</code> 的授权方式。不过这种方式下，控制器层是没办法定位当前执行的上下文是哪个用户，进而 locale 也是没法获取上下文值。</p><h2 id="优化服务层AOP切面类"><a href="#优化服务层AOP切面类" class="headerlink" title="优化服务层AOP切面类"></a>优化服务层AOP切面类</h2><p>你可以采用与<code>定时任务</code>类似的做法来解决此问题，不过这种方式需要对每一个定时任务入口类和控制器进行额外的编码处理，带来了不少的工作量。这里有一种一劳永逸的方法，就是修改服务层的切面类 <code>ServiceExecutionAdvice</code>，直接处理 en_US 的情况。这样一来，无论请求是从定时任务还是 Rest API 过来，只要遵循服务的处理都是通过调用服务接口方法并且<strong>传入 IRequest 参数实例</strong>，我们就会始终可以获取正确的 locale 值，实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hand.hap.core.impl;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceExecutionAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SERVER_DEFAULT_LANG</span> <span class="operator">=</span> <span class="string">&quot;en_US&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IProfileService profileService;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="type">IRequest</span> <span class="variable">requestContext</span> <span class="operator">=</span> (IRequest) args[idx];</span><br><span class="line">        <span class="keyword">if</span> (requestContext != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(SERVER_DEFAULT_LANG.equals(requestContext.getLocale())) &#123;</span><br><span class="line">                requestContext.setLocale(</span><br><span class="line">                    profileService.getProfileValue(<span class="literal">null</span>, <span class="string">&quot;SYSTEM_LANG&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            RequestHelper.setCurrentRequest(requestContext);</span><br><span class="line">            initMDC(requestContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HAP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i18n </tag>
            
            <tag> iRequest </tag>
            
            <tag> locale </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为HAP应用启用新语言支持</title>
      <link href="/2018/10/09/hap-enable-new-language/"/>
      <url>/2018/10/09/hap-enable-new-language/</url>
      
        <content type="html"><![CDATA[<h2 id="HAP-简介"><a href="#HAP-简介" class="headerlink" title="HAP 简介"></a>HAP 简介</h2><p>汉得应用开发平台（HAND Application Platform）是汉得公司为了应对移动互联网化、应用云端化、海量数据化和数字化服务转型的应用开发平台，是中台化产品和应用开发的基础平台。HAP采用开源的Java EE技术体系，平台设计灵活可扩展、可移植、可应对高并发需求。</p><blockquote><p>更多信息请访问：<a href="http://eco.hand-china.com/platform/hap.html">http://eco.hand-china.com/platform/hap.html</a></p></blockquote><span id="more"></span><h2 id="启用新语言"><a href="#启用新语言" class="headerlink" title="启用新语言"></a>启用新语言</h2><p>HAP 应用开发平台默认支持简体中文和英语两种语言，如果要启用新的语言支持，比如西班牙语，则需要找到所有国际化相关的前后端对象进行翻译。</p><p>幸运的是，HAP 应用开发平台对国际化提供了良好的框架支持和开发规范，所以涉及到和多语言或者国际化相关的数据表和其他资源对象的分布相对集中且有规律可循，具体分三部分：</p><ol><li>多语言描述总表 <code>SYS_PROMPTS</code></li><li>所有平台和功能页面的实体对象所关联的多语言表 <code>*_TL</code></li><li>KendoUI 国际化支持文件 <code>kendo.culture.&lt;locale&gt;.js</code> 和 <code>kendo.messages.&lt;locale&gt;.js</code></li></ol><p>下面以西班牙语为例，详细说明整个过程。</p><h3 id="1-定义语言代码"><a href="#1-定义语言代码" class="headerlink" title="1. 定义语言代码"></a>1. 定义语言代码</h3><p>进入 <code>系统管理</code> &gt; <code>语言维护</code> 新增西班牙语言代码 <code>es_ES</code></p><p><img data-src="/2018/10/09/hap-enable-new-language/image-20181009103555564.png" alt="image-20181009103555564"></p><h3 id="2-适配-KendoUI-国际化资源文件"><a href="#2-适配-KendoUI-国际化资源文件" class="headerlink" title="2. 适配 KendoUI 国际化资源文件"></a>2. 适配 KendoUI 国际化资源文件</h3><p>按照下表将指定的资源文件拷贝到对应目录下：</p><table><thead><tr><th>源文件路径</th><th>拷贝后的路径</th></tr></thead><tbody><tr><td>target/core/lib/kendoui/js/messages/kendo.messages.en-GB.js</td><td>src/webapp/lib/kendoui/js/messages/kendo.messages.es-ES.js</td></tr><tr><td>target/core/lib/kendoui/js/cultures/kendo.culture.en-GB.js</td><td>src/webapp/lib/kendoui/js/cultures/kendo.culture.es-ES.js</td></tr></tbody></table><h3 id="3-更新数据库记录"><a href="#3-更新数据库记录" class="headerlink" title="3. 更新数据库记录"></a>3. 更新数据库记录</h3><p>使用 en_GB 下的语言记录来更新所有的国际化表，脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ========================================================</span></span><br><span class="line"><span class="comment">-- Insert all Spanish records based on original en_GB</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Creation Date : 2018-10-08</span></span><br><span class="line"><span class="comment">-- Created By    : memories.liu@hand-china.com</span></span><br><span class="line"><span class="comment">-- Script Version: 1.0.0</span></span><br><span class="line"><span class="comment">-- HAP Version   : 3.5.0-RELEASE</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- ========================================================</span></span><br><span class="line"><span class="comment">-- System Prompt table:</span></span><br><span class="line"><span class="comment">--   SYS_PROMPTS</span></span><br><span class="line"><span class="comment">-- Multi-lingual tables listed below:</span></span><br><span class="line"><span class="comment">--   FND_COMPANY_TL</span></span><br><span class="line"><span class="comment">--   HR_ORG_POSITION_TL</span></span><br><span class="line"><span class="comment">--   HR_ORG_UNIT_TL</span></span><br><span class="line"><span class="comment">--   SYS_ATTACH_CATEGORY_TL</span></span><br><span class="line"><span class="comment">--   SYS_CODE_TL</span></span><br><span class="line"><span class="comment">--   SYS_CODE_VALUE_TL</span></span><br><span class="line"><span class="comment">--   SYS_DASHBOARD_TL</span></span><br><span class="line"><span class="comment">--   SYS_FUNCTION_TL</span></span><br><span class="line"><span class="comment">--   SYS_HOTKEY_TL</span></span><br><span class="line"><span class="comment">--   SYS_IF_CONFIG_HEADER_TL</span></span><br><span class="line"><span class="comment">--   SYS_IF_CONFIG_LINE_TL</span></span><br><span class="line"><span class="comment">--   SYS_RESOURCE_ITEM_TL</span></span><br><span class="line"><span class="comment">--   SYS_RESOURCE_TL</span></span><br><span class="line"><span class="comment">--   SYS_ROLE_TL</span></span><br><span class="line"><span class="comment">-- ========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- sys_prompts</span></span><br><span class="line"><span class="keyword">insert into</span> sys_prompts (</span><br><span class="line">  prompt_id,</span><br><span class="line">  prompt_code,</span><br><span class="line">  lang,</span><br><span class="line">  description,</span><br><span class="line">  object_version_number</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">  SYS_PROMPTS_S.NEXTVAL,</span><br><span class="line">  prompt_code,</span><br><span class="line">  <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">  description,</span><br><span class="line">  object_version_number</span><br><span class="line"><span class="keyword">from</span> sys_prompts <span class="keyword">where</span> lang <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- FND_COMPANY_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> FND_COMPANY_TL(</span><br><span class="line">    COMPANY_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    COMPANY_SHORT_NAME,</span><br><span class="line">    COMPANY_FULL_NAME</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    COMPANY_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    COMPANY_SHORT_NAME,</span><br><span class="line">    COMPANY_FULL_NAME</span><br><span class="line"><span class="keyword">FROM</span> FND_COMPANY_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- HR_ORG_POSITION_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> HR_ORG_POSITION_TL(</span><br><span class="line">    POSITION_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    POSITION_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> HR_ORG_POSITION_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- HR_ORG_UNIT_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> HR_ORG_UNIT_TL(</span><br><span class="line">    UNIT_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    UNIT_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> HR_ORG_UNIT_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_ATTACH_CATEGORY_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_ATTACH_CATEGORY_TL(</span><br><span class="line">    CATEGORY_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    CATEGORY_NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    CATEGORY_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    CATEGORY_NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_ATTACH_CATEGORY_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_CODE_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_CODE_TL(</span><br><span class="line">    CODE_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    CODE_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_CODE_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_CODE_VALUE_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_CODE_VALUE_TL(</span><br><span class="line">    CODE_VALUE_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    MEANING,</span><br><span class="line">    DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    CODE_VALUE_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    MEANING,</span><br><span class="line">    DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_CODE_VALUE_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_DASHBOARD_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_DASHBOARD_TL(</span><br><span class="line">    DASHBOARD_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    TITLE,</span><br><span class="line">    DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    DASHBOARD_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    TITLE,</span><br><span class="line">    DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_DASHBOARD_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_FUNCTION_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_FUNCTION_TL(</span><br><span class="line">    FUNCTION_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    FUNCTION_NAME,</span><br><span class="line">    FUNCTION_DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    FUNCTION_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    FUNCTION_NAME,</span><br><span class="line">    FUNCTION_DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_FUNCTION_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_HOTKEY_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_HOTKEY_TL(</span><br><span class="line">    HOTKEY_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    HOTKEY_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_HOTKEY_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_IF_CONFIG_HEADER_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_IF_CONFIG_HEADER_TL(</span><br><span class="line">    HEADER_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    HEADER_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_IF_CONFIG_HEADER_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_IF_CONFIG_LINE_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_IF_CONFIG_LINE_TL(</span><br><span class="line">    LINE_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    LINE_NAME,</span><br><span class="line">    LINE_DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    LINE_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    LINE_NAME,</span><br><span class="line">    LINE_DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_IF_CONFIG_LINE_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_RESOURCE_ITEM_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_RESOURCE_ITEM_TL(</span><br><span class="line">    RESOURCE_ITEM_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    ITEM_NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    RESOURCE_ITEM_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    ITEM_NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_RESOURCE_ITEM_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_RESOURCE_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_RESOURCE_TL(</span><br><span class="line">    RESOURCE_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    RESOURCE_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    NAME,</span><br><span class="line">    DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_RESOURCE_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SYS_ROLE_TL</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> SYS_ROLE_TL(</span><br><span class="line">    ROLE_ID,</span><br><span class="line">    LANG,</span><br><span class="line">    ROLE_NAME,</span><br><span class="line">    ROLE_DESCRIPTION</span><br><span class="line">) <span class="keyword">SELECT</span> </span><br><span class="line">    ROLE_ID,</span><br><span class="line">    <span class="string">&#x27;es_ES&#x27;</span>,</span><br><span class="line">    ROLE_NAME,</span><br><span class="line">    ROLE_DESCRIPTION</span><br><span class="line"><span class="keyword">FROM</span> SYS_ROLE_TL <span class="keyword">WHERE</span> LANG <span class="operator">=</span> <span class="string">&#x27;en_GB&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="4-人工翻译"><a href="#4-人工翻译" class="headerlink" title="4. 人工翻译"></a>4. 人工翻译</h3><p>将所有西班牙语言下的字符串进行人工翻译，这包括 kendoui 的国际化资源文件和所有的国际化表的记录。</p><h3 id="5-清缓存并重启服务器"><a href="#5-清缓存并重启服务器" class="headerlink" title="5. 清缓存并重启服务器"></a>5. 清缓存并重启服务器</h3><p>启动命令行工具 redis-cli 并连接至 Redis，执行以下命令清除 Redis 缓存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure><p>重启 Tomcat 服务器。</p>]]></content>
      
      
      <categories>
          
          <category> HAP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 kubeadm 快速安装 Kubernetes 集群</title>
      <link href="/2018/10/02/install-k8s-using-kubeadm/"/>
      <url>/2018/10/02/install-k8s-using-kubeadm/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本教程将利用 Kubernetes 官方认为安装部署集群环境的最佳实践 - kubeadm 进行环境搭建。安装成功之后，我们仍然使用《Kubernetes 本地快速搭建指南》中所介绍的 Web 应用示例来部署至集群环境中，并以此确认集群是否可用。</p><span id="more"></span><h3 id="kubeadm-简介"><a href="#kubeadm-简介" class="headerlink" title="kubeadm 简介"></a>kubeadm 简介</h3><p>在 CentOS / RHEL 环境中，安装 Kubernetes 的最简单的方式就是通过 <code>yum install kubernetes</code> 来完成，但仍然需要修改各个组件的启动参数，才能完成 Kubernetes 集群的设置，整个过程较为复杂，也容易出错。因此，从 Kubernetes v1.4 版本开始，官方正式引入了命令行工具 kubeadm ，致力于简化集群环境的安装和解决 Kubernetes 集群的高可用的问题。但直到 v1.9 版本，此工具还不能用于生产环境。按照官方的计划，此工具将会在 2018 年内正式面向生产环境推出。所以在现阶段，此工具比较适合初学者安装和学习 Kubernetes。</p><h3 id="kubeadm-版本"><a href="#kubeadm-版本" class="headerlink" title="kubeadm 版本"></a>kubeadm 版本</h3><p>本教程将使用 kubeadm 的 <code>v1.9.2</code> 版本安装 Kubernetes 集群。在默认情况下，使用 kubeadm 安装的 Kubernetes 的主版本和 kubeadm 相一致，此处为 <code>v1.9.x</code> 。如果读者想要安装其他的版本，则使用 <code>--kubernetes-version</code> 参数来指定 Kubernetes 的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=vx.y.z</span><br></pre></td></tr></table></figure><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>本教程将使用64位的 CentOS 7 操作系统作为安装环境，读者可以根据实际情况来进行准备。笔者个人推荐 VirtualBox + Vagrant 在本机快速搭建环境，具体可以参考《Kubernetes 本地快速搭建指南》，此处不再赘述。</p><h2 id="安装-kubeadm"><a href="#安装-kubeadm" class="headerlink" title="安装 kubeadm"></a>安装 kubeadm</h2><p>本节将详细介绍 kubeadm 在 CentOS 7 下的安装步骤。</p><h3 id="设置主机名称"><a href="#设置主机名称" class="headerlink" title="设置主机名称"></a>设置主机名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname kubeadm-master</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;127.0.0.1 kubeadm-master&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h3 id="关闭-SELinux"><a href="#关闭-SELinux" class="headerlink" title="关闭 SELinux"></a>关闭 SELinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=permissive/g&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="禁用-SWAP"><a href="#禁用-SWAP" class="headerlink" title="禁用 SWAP"></a>禁用 SWAP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br></pre></td></tr></table></figure><h3 id="禁用防火墙"><a href="#禁用防火墙" class="headerlink" title="禁用防火墙"></a>禁用防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h3 id="微调内核设置"><a href="#微调内核设置" class="headerlink" title="微调内核设置"></a>微调内核设置</h3><p>对于 RHEL/CentOS 系统，由于 iptables 的设置，网络流量可能被错误的路由，因此要对内核进行如下调整：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt;  /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h3 id="安装依赖的程序包"><a href="#安装依赖的程序包" class="headerlink" title="安装依赖的程序包"></a>安装依赖的程序包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y update &amp;&amp; yum -y upgrade</span><br><span class="line">yum -y install docker socat</span><br></pre></td></tr></table></figure><h3 id="离线安装-kubeadm"><a href="#离线安装-kubeadm" class="headerlink" title="离线安装 kubeadm"></a>离线安装 kubeadm</h3><p>官方推荐设置 yum 源进行 kubeadm 的安装，不过在国内的网络环境下，谷歌的服务无法被正确的访问。此处采用离线安装方式安装 rpm 包。读者可以前往 <a href="https://pan.baidu.com/s/1kWfpPdl">https://pan.baidu.com/s/1kWfpPdl</a> 进行下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh /path/to/kubectl-1.9.2-0.x86_64.rpm \</span><br><span class="line">         /path/to/kubernetes-cni-0.6.0-0.x86_64.rpm \</span><br><span class="line">         /path/to/kubelet-1.9.2-0.x86_64.rpm \</span><br><span class="line">         /path/to/kubeadm-1.9.2-0.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="启动-kubeadm"><a href="#启动-kubeadm" class="headerlink" title="启动 kubeadm"></a>启动 kubeadm</h2><p>本节将对 kubeadm 启动前进行参数配置，同时将 Kubernetes 的附加功 Dashboard 也同时进行部署。</p><h3 id="设置-Docker-镜像加速器"><a href="#设置-Docker-镜像加速器" class="headerlink" title="设置 Docker 镜像加速器"></a>设置 Docker 镜像加速器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/docker/daemon.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot; : [</span></span><br><span class="line"><span class="string">    &quot;http://4a0fee72.m.daocloud.io&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="启动-docker-和-kubelet-服务"><a href="#启动-docker-和-kubelet-服务" class="headerlink" title="启动 docker 和 kubelet 服务"></a>启动 docker 和 kubelet 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><h3 id="导入-Docker-镜像"><a href="#导入-Docker-镜像" class="headerlink" title="导入 Docker 镜像"></a>导入 Docker 镜像</h3><p>由于谷歌服务无法访问，因此相关的 Docker 镜像需要通过代理提前下载好，并进行打包。读者可以从 <a href="https://pan.baidu.com/s/1kWfpPdl">https://pan.baidu.com/s/1kWfpPdl</a> 进行下载。导入镜像命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker load -i /path/to/kubeadm/v1.9.2/docker-images.tar</span><br><span class="line">Loaded image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.7</span><br><span class="line">Loaded image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.7</span><br><span class="line">Loaded image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7</span><br><span class="line">Loaded image: gcr.io/google_containers/etcd-amd64:3.1.11</span><br><span class="line">Loaded image: gcr.io/google_containers/kube-controller-manager-amd64:v1.9.2</span><br><span class="line">Loaded image: gcr.io/google_containers/kube-scheduler-amd64:v1.9.2</span><br><span class="line">Loaded image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.2</span><br><span class="line">Loaded image: gcr.io/google_containers/kube-proxy-amd64:v1.9.2</span><br><span class="line">Loaded image: gcr.io/google_containers/kube-apiserver-amd64:v1.9.2</span><br><span class="line">Loaded image: gcr.io/google_containers/pause-amd64:3.0</span><br></pre></td></tr></table></figure><h3 id="启动-kubeadm-1"><a href="#启动-kubeadm-1" class="headerlink" title="启动 kubeadm"></a>启动 kubeadm</h3><p>使用 <code>kubeadm init</code> 初始化并启动 Kubernetes 集群。其中的几个重要参数选项列示如下：</p><table><thead><tr><th>参数选项</th><th>参考值</th><th>含义</th></tr></thead><tbody><tr><td><code>--kubernetes-version</code></td><td>v1.9.2</td><td>Kubernetes 的版本</td></tr><tr><td><code>--pod-network-cidr</code></td><td>10.244.0.0/16</td><td>Pod 网络寻址范围，此处是网络插件 Flannel 用到</td></tr><tr><td><code>--apiserver-advertise-address</code></td><td>CentOS 主机的 IP</td><td>Kubernetes 集群的 apiserver (主节点) 的地址</td></tr></tbody></table><p>启动 kubeadm 的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm init \</span><br><span class="line">  --kubernetes-version=v1.9.2 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">  --apiserver-advertise-address=192.168.119.101</span><br><span class="line"><span class="comment"># 以下是 kubeadm 初始化时的输出信息</span></span><br><span class="line">[init] Using Kubernetes version: v1.9.2</span><br><span class="line">[init] Using Authorization modes: [Node RBAC]</span><br><span class="line">[preflight] Running pre-flight checks.</span><br><span class="line">[WARNING FileExisting-crictl]: crictl not found <span class="keyword">in</span> system path</span><br><span class="line">[certificates] Generated ca certificate and key.</span><br><span class="line">[certificates] Generated apiserver certificate and key.</span><br><span class="line">[certificates] apiserver serving cert is signed <span class="keyword">for</span> DNS names [kubeadm-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.119.101]</span><br><span class="line">[certificates] Generated apiserver-kubelet-client certificate and key.</span><br><span class="line">[certificates] Generated sa key and public key.</span><br><span class="line">[certificates] Generated front-proxy-ca certificate and key.</span><br><span class="line">[certificates] Generated front-proxy-client certificate and key.</span><br><span class="line">[certificates] Valid certificates and keys now exist <span class="keyword">in</span> <span class="string">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: <span class="string">&quot;admin.conf&quot;</span></span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: <span class="string">&quot;kubelet.conf&quot;</span></span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: <span class="string">&quot;controller-manager.conf&quot;</span></span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: <span class="string">&quot;scheduler.conf&quot;</span></span><br><span class="line">[controlplane] Wrote Static Pod manifest <span class="keyword">for</span> component kube-apiserver to <span class="string">&quot;/etc/kubernetes/manifests/kube-apiserver.yaml&quot;</span></span><br><span class="line">[controlplane] Wrote Static Pod manifest <span class="keyword">for</span> component kube-controller-manager to <span class="string">&quot;/etc/kubernetes/manifests/kube-controller-manager.yaml&quot;</span></span><br><span class="line">[controlplane] Wrote Static Pod manifest <span class="keyword">for</span> component kube-scheduler to <span class="string">&quot;/etc/kubernetes/manifests/kube-scheduler.yaml&quot;</span></span><br><span class="line">[etcd] Wrote Static Pod manifest <span class="keyword">for</span> a <span class="built_in">local</span> etcd instance to <span class="string">&quot;/etc/kubernetes/manifests/etcd.yaml&quot;</span></span><br><span class="line">[init] Waiting <span class="keyword">for</span> the kubelet to boot up the control plane as Static Pods from directory <span class="string">&quot;/etc/kubernetes/manifests&quot;</span>.</span><br><span class="line">[init] This might take a minute or longer <span class="keyword">if</span> the control plane images have to be pulled.</span><br><span class="line">[apiclient] All control plane components are healthy after 30.502464 seconds</span><br><span class="line">[uploadconfig] Storing the configuration used <span class="keyword">in</span> ConfigMap <span class="string">&quot;kubeadm-config&quot;</span> <span class="keyword">in</span> the <span class="string">&quot;kube-system&quot;</span> Namespace</span><br><span class="line">[markmaster] Will mark node kubeadm-master as master by adding a label and a taint</span><br><span class="line">[markmaster] Master kubeadm-master tainted and labelled with key/value: node-role.kubernetes.io/master=<span class="string">&quot;&quot;</span></span><br><span class="line">[bootstraptoken] Using token: 3a9f97.1cd340e0f34adbbb</span><br><span class="line">[bootstraptoken] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="keyword">in</span> order <span class="keyword">for</span> nodes to get long term certificate credentials</span><br><span class="line">[bootstraptoken] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstraptoken] Configured RBAC rules to allow certificate rotation <span class="keyword">for</span> all node client certificates <span class="keyword">in</span> the cluster</span><br><span class="line">[bootstraptoken] Creating the <span class="string">&quot;cluster-info&quot;</span> ConfigMap <span class="keyword">in</span> the <span class="string">&quot;kube-public&quot;</span> namespace</span><br><span class="line">[addons] Applied essential addon: kube-dns</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now <span class="built_in">join</span> any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> --token 3a9f97.1cd340e0f34adbbb 192.168.119.101:6443 --discovery-token-ca-cert-hash sha256:64111962ff9df5f566d21f5ad5e9d046487aff4553a738f5c6d1ca0fdc4c69b8</span><br></pre></td></tr></table></figure><h3 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h3><p>拷贝 Kubernetes 的配置文件至当前用户的目录下，使当前用户可以正确使用 kubectl 进行操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="配置单节点集群"><a href="#配置单节点集群" class="headerlink" title="配置单节点集群"></a>配置单节点集群</h3><p>默认情况下，master 主节点是不参与工作负载的，如果用户在本地配置的是一个单节点集群，那么需要将 master 主节点同时设置成工作节点，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><blockquote><p>如果想配置多节点的集群，则需要在工作节点安装 kubeadm, kubelet, kubectl 和 docker，然后使用主节点运行 <code>kubeadm init</code> 命令所打印出来的 <code>join</code> 命令来加入集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> --token 3a9f97.1cd340e0f34adbbb 192.168.119.101:6443 --discovery-token-ca-cert-hash sha256:64111962ff9df5f566d21f5ad5e9d046487aff4553a738f5c6d1ca0fdc4c69b8</span><br></pre></td></tr></table></figure></blockquote><h3 id="部署附加组件"><a href="#部署附加组件" class="headerlink" title="部署附加组件"></a>部署附加组件</h3><p>安装 Flannel 网络插件和 Dashboard 插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Flannel</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="comment"># 安装 Dashboard</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class="line"><span class="comment"># 创建 admin-user 管理员角色</span></span><br><span class="line">kubectl apply -f /path/to/admin-user-role.yaml</span><br></pre></td></tr></table></figure><p>admin-user-role.yaml 的定义如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><p>使用如下命令获取 admin-user 管理员角色的访问口令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">Name:         admin-user-token-j6rlh</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name=admin-user</span><br><span class="line">              kubernetes.io/service-account.uid=111eba61-0d3e-11e8-8763-525400ad3b43</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWo2cmxoIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIxMTFlYmE2MS0wZDNlLTExZTgtODc2My01MjU0MDBhZDNiNDMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.qY-6JaTSqpybnhusvOnNkcw7AE1iHGkBZObO62Vo9XZUEK95NlHaaIj7v8kyNLHujpHuVgTYQPyMBvPzU5JONzdEP5U2K5Q_Z3b6f95vWHGwhNO6qdz5EOxK6-_sma61zL2uQpHb637v0ICfwgFRDE_4as0bq2i5vT-dGCv5jvDjmM-b1mjjeXXC6Z7EYLN-DYp38kIzrxFoQkX0_eNd2fIIeKZshthvGmAw5yEr6opkOnbXyEaqgiMOM9ZhVWO6UYseOEgE0GdDnXgoBeYjFXkZ1FDlkyXihNv6tEU5TQCkPt1iUdeOu_dL6OdvaH91wQjeDxeej3qVyvSJaWAjnA</span><br></pre></td></tr></table></figure><p>其中 token 值即为对应的授权口令。</p><h3 id="访问-Dashboard"><a href="#访问-Dashboard" class="headerlink" title="访问 Dashboard"></a>访问 Dashboard</h3><p>拷贝 <code>$HOME/.kube/config</code> 文件至主机的某一个目录下，比如 <code>/path/to/kube</code> ，然后使用 <code>kubectl proxy</code> 启动代理，具体命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl --kubeconfig=/path/to/kube/config proxy</span><br><span class="line">Starting to serve on 127.0.0.1:8001</span><br></pre></td></tr></table></figure><p>这时，访问 <a href="http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/">http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</a> 进入 Dashboard 并使用 上面的 Token（令牌） 进行登录：</p><p><img data-src="/2018/10/02/install-k8s-using-kubeadm/dashboard-login.png"></p><p>点击<code>登录</code>按钮进入 Dashboard 主页，我们就可以在这里管理 Kubernetes 集群了，Dashboard 主页截图如下所示。</p><p><img data-src="/2018/10/02/install-k8s-using-kubeadm/dashboard-home.png"></p><h2 id="验证-Kubernetes"><a href="#验证-Kubernetes" class="headerlink" title="验证 Kubernetes"></a>验证 Kubernetes</h2><p>本节将快速地向 Kubernetes 集群部署一个示例应用来验证集群是否工作正常。示例应用取自《Kubernetes 本地快速搭建指南》案例。</p><h3 id="快速部署示例应用"><a href="#快速部署示例应用" class="headerlink" title="快速部署示例应用"></a>快速部署示例应用</h3><p>示例应用的 yaml 定义如下，读者可将其另存为文件 demo.yaml，以供后面使用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span> </span><br><span class="line">    <span class="attr">app:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">myweb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myweb</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">kubeguide/tomcat-app:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30001</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myweb</span></span><br></pre></td></tr></table></figure><p>使用以下命令部署应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f /path/to/demo.yaml</span><br></pre></td></tr></table></figure><h3 id="访问应用主页"><a href="#访问应用主页" class="headerlink" title="访问应用主页"></a>访问应用主页</h3><p>经过以上的步骤，我们的应用就成功地部署在了 Kubernetes 集群上了，我们可以访问 http://&lt;虚拟机 IP&gt;:30001/demo/ 来验证我们的应用了。</p><p><img data-src="/2018/10/02/install-k8s-using-kubeadm/demo.png"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> kubeadm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
